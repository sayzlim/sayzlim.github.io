<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Sayz Lim]]></title>
  <link href="https://sayzlim.net/atom.xml" rel="self"/>
  <link href="https://sayzlim.net/"/>
  <updated>2024-07-30T12:00:22+07:00</updated>
  <id>https://sayzlim.net/</id>
  <author>
    <name><![CDATA[Sayz Lim]]></name>
    <email><![CDATA[talk@sayzlim.net]]></email>
  </author>
  <generator uri="https://jekyllrb.com">Jekyll</generator>

  
  <entry>
    <title type="html"><![CDATA[Designing the MDN sidebar ad unit]]></title>
    <link href="https://sayzlim.net/designing-mdn-sidebar-ad/"/>
    <updated>2024-07-24T00:00:00+07:00</updated>
    <id>https://sayzlim.net/designing-mdn-sidebar-ad</id>
    <content type="html"><![CDATA[<p>MDN (Mozilla Developer Network ) is one of the most visited online resources that any frontend developers visit on a regular basis.</p>

<p>I was excited when I learned that <a href="https://www.buysellads.com/blog/mozilla-developer-network-partners-exclusively-with-buysellads-for-native-advertising-initiative">BuySellAds partnered with MDN</a> to handle their native advertising exclusively.</p>

<p>The initial design for the ad unit is fairly straightforward. It uses the same creatives as the Carbon ad unit, which is a 260 × 200 image and description. I passed the Carbon classic mockup to the team at MDN to implement the design. The advantage of sharing the same creatives as Carbon is that we can set up the campaigns immediately the moment we have approval from clients to run the campaigns on MDN.</p>

<p>During one of the discussions with the team, I was asked to refresh the sidebar ad unit. I already have a few designs as part of my experiments with Carbon Cover creatives. It didn’t take much time to put together a <a href="https://cdpn.io/pen/debug/zYQrYbp/e132d3531f4ec948a535e3b01ab7ad94">CodePen live demo</a> to share with MDN team.</p>

<p><img src="https://images.sayzlim.net/2024/07/mdn-sidebar.webp" alt="" title="Initial mockup for MDN sidebar ad unit" /></p>

<p>When designing an ad unit tailored for developers, I take into account the following crucial factors:</p>
<ul>
  <li>How much empty space the most visited pages, usually the docs, is left to display ads?</li>
  <li>What are the creatives that will be used to design this ad unit?</li>
  <li>How will the creatives requirements affect the time needed for account manager to collect from clients?</li>
  <li>How <em>flashy</em> can we design the ad unit by showcasing all the creatives while maintaining the subtlety of the ads being present with the main content.</li>
  <li>What percentage of browsers support the CSS we use for this design?</li>
</ul>

<p>The goal is to use the same creatives as Carbon Cover and combine them in such a way that it’s still occupy the relative same amount of width in the sidebar. I wanted to put more focus on the image and decided to remove the padding inside the ad container. I chose to use <code class="language-plaintext highlighter-rouge">linear-gradient</code> because it’s widely supported and I can ensure that it looks similar on most browsers.</p>

<p>There is also a small touch of animation when the site visitors hover the image. The addition of title and call-to-action fields allows us to put more emphasis on the tagline of the ad.</p>

<p>In summary, creating ad units for a developer audience involves careful consideration of design elements and user experience. The collaborative effort between BuySellAds and MDN has set a solid foundation for innovative approaches to native advertising, and I hope the insights shared in this post prove helpful as you navigate similar challenges.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Filtering pivot table data with custom formula in Google Sheets]]></title>
    <link href="https://sayzlim.net/filter-pivot-table-custom-formula-google-sheets/"/>
    <updated>2024-07-17T00:00:00+07:00</updated>
    <id>https://sayzlim.net/filter-pivot-table-custom-formula-google-sheets</id>
    <content type="html"><![CDATA[<p>When working with a medium-sized dataset, it’s easier to use a pivot table to group and analyze the data. However, one limitation of pivot tables is that you have limited options when it comes to filtering the data.</p>

<p>There are many instances where the value of the column you want to filter data by is made up of a series of strings. Take categories, for example; they usually appear in the form of strings chained together like “Crypto, Design, Dev, Tech”.</p>

<p>What if you only want to create a pivot table that displays zones that are under the Crypto and Tech categories?</p>

<p>The most straightforward solution is to combine the CUSTOM FORMULA filter option and REGEXMATCH to select the data you need.</p>

<p>If you’re like me, you probably try to match the column letters in the formula and are unable to get the result you want to achieve.</p>

<p>Instead of using <code class="language-plaintext highlighter-rouge">=REGEXMATCH(B:B,"Crypto|Tech")</code>, which assumes that the formula can recognize the column, you must match the column name like this: <code class="language-plaintext highlighter-rouge">=REGEXMATCH(Categories,"Crypto|Tech")</code>. This is because the pivot table recognizes the header name instead of the column letter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding mechanical keyboard sound with Keyboard Maestro]]></title>
    <link href="https://sayzlim.net/mechanical-keyboard-maestro-sound/"/>
    <updated>2024-05-11T00:00:00+07:00</updated>
    <id>https://sayzlim.net/mechanical-keyboard-maestro-sound</id>
    <content type="html"><![CDATA[<p>During a recent conversation with my friends, they introduced me to an application that can bring mechanical keyboard sounds to a Mac. Intrigued by the idea of how adding sound feedback can enhance the typing experience, I decided to create a Keyboard Maestro macro to replicate this feature.</p>

<p><img src="https://images.sayzlim.net/2024/05/mechanical-sound-macro.webp" alt="" title="Mechanical Typing Sound Keyboard Maestro Macro" /></p>

<p>Creating the macro turned out to be fairly simple. By utilizing the “This string is typed” trigger and entering the regular expression <code class="language-plaintext highlighter-rouge">[a-zA-Z0-9\r\n\s]</code>, the macro can play a mechanical sound every time a key is pressed. Remember to uncheck the “simulate matching deletes before executing” option to prevent the macro from interfering with keystrokes.</p>

<p>The most challenging aspect of this project was finding a suitable keyboard sound to use. A quick search for “mechanical keyboard sound” should provide access to websites where sound effects can be downloaded for free.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<p>One advantage of using Keyboard Maestro for this task is that it eliminates the need to grant additional permissions to another app to access keystrokes. I guess it’s better from the privacy perspective.</p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>You can search for “mixkit-hard-single-key-press-in-a-laptop-2542” which is the sound I’m using in the macro. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resetting properties with "all" shorthand in CSS]]></title>
    <link href="https://sayzlim.net/reset-properties-css/"/>
    <updated>2024-04-27T00:00:00+07:00</updated>
    <id>https://sayzlim.net/reset-properties-css</id>
    <content type="html"><![CDATA[<p>When designing an ad unit that Carbon publishers need to install on their website, I need to make sure the website stylesheet is not overriding the CSS of the ad unit. This is where the cascading nature of CSS shines.</p>

<p>Cascading is an inherent feature that enhances the flexibility of CSS, allowing for orderly and efficient styling. One of the common techniques is to reset all the properties to the initial value before working on the ad unit design.</p>

<p>Let’s say that I’m going to wrap the ad unit in a <code class="language-plaintext highlighter-rouge">div</code> element with <code class="language-plaintext highlighter-rouge">carbonads</code> as the ID. I will write something like this to reset the CSS of the parent container, which will be inherited by all the children.</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">#carbonads</span> <span class="p">{</span>
	<span class="nl">all</span><span class="p">:</span> <span class="n">revert</span><span class="p">;</span> <span class="err">//</span> <span class="err">revert</span> <span class="err">all</span> <span class="err">the</span> <span class="err">properties</span> <span class="err">to</span> <span class="err">the</span> <span class="err">initial</span> <span class="err">value</span> <span class="err">set</span> <span class="err">by</span> <span class="err">browsers</span>
<span class="p">}</span>

<span class="nf">#carbonads</span> <span class="nc">.carbon-wrapper</span> <span class="p">{</span>
	<span class="err">//</span> <span class="err">Write</span> <span class="err">the</span> <span class="err">CSS</span> <span class="err">value</span> <span class="err">to</span> <span class="err">style</span> <span class="err">the</span> <span class="err">ad</span> <span class="err">format</span>
<span class="p">}</span>
</code></pre></div></div>

<p>However, you must not write something like the following because it will also make <code class="language-plaintext highlighter-rouge">&lt;style&gt;</code> element visible. It’s better to limit the <code class="language-plaintext highlighter-rouge">all</code> shorthand to the parent container where no other properties will be used.</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">#carbonads</span> <span class="o">*</span> <span class="p">{</span>
	<span class="nl">all</span><span class="p">:</span> <span class="n">revert</span>
<span class="p">}</span>
</code></pre></div></div>

<p>If you wish to to learn more about inheritance in CSS, I recommend <a href="https://piccalil.li/blog/css-inheritance/" title="CSS inheritance by Andy Bell">checking out this post</a> by Andy Bell that shares more examples.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding export PATH with ChatGPT]]></title>
    <link href="https://sayzlim.net/chatgpt-export-path/"/>
    <updated>2023-04-15T00:00:00+07:00</updated>
    <id>https://sayzlim.net/chatgpt-export-path</id>
    <content type="html"><![CDATA[<p>One main advantage of a tool like ChatGPT becoming widely available to the public is that you can understand a concept faster because the answer is more digestible than the search engine result.</p>

<p>I spent a few hours this weekend checking out some configuration files on my HOME directory. I have installed a bunch of CLI programs in the last couple of years, but I don’t have a good understanding of how they work. So it’s an excellent opportunity to ask some questions through ChatGPT to help me understand what each command does and whether removing them is safe.</p>

<h2 id="what-does-export-do">What does export do?</h2>
<p>I don’t completely understand the following statements in the <code class="language-plaintext highlighter-rouge">.zprofile</code>. I assume that it’s required because the documentation told me to add them.</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">N_PREFIX</span><span class="o">=</span><span class="nv">$HOME</span>/.local/n
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$N_PREFIX</span>/bin:<span class="nv">$PATH</span>
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$PYENV_ROOT</span><span class="s2">/bin:</span><span class="nv">$PATH</span><span class="s2">"</span>
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/.rbenv/bin:</span><span class="nv">$PATH</span><span class="s2">"</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">export</code> statement creates a global variable during the active shell session. You can access those variables by prepending the variable with a dollar sign. Since <code class="language-plaintext highlighter-rouge">PATH</code> variable is the default global variable for Unix-based operating systems to search for executable files, it’s expected that we have to include our user-installed files in the PATH variable.</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$N_PREFIX</span>/bin:<span class="nv">$PATH</span>
</code></pre></div></div>

<p>For example, if the initial PATH value is <code class="language-plaintext highlighter-rouge">/usr/local/bin</code>, running the above command will expand the <code class="language-plaintext highlighter-rouge">$N_PREFIX</code> and <code class="language-plaintext highlighter-rouge">$PATH</code> values and prepend them to the previous PATH value separated with a colon. The result will be something like the following.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/Users/username/.local/n/bin:/usr/local/bin
</code></pre></div></div>

<p class="sidenote">The <code class="language-plaintext highlighter-rouge">colon</code> is used as a separator for the shell to search for all the executables in the PATH variable. It’s a common mistake to forget to include <code class="language-plaintext highlighter-rouge">:$PATH</code> and cause the shell to be unable to search for the executables that were added before.</p>

<p>You can type <code class="language-plaintext highlighter-rouge">export</code> into the shell application to see the list of global variables.</p>

<p>ChatGPT has made it easy for people to understand the basic concept, but it’s still far from being able to write a better email or teaching modern technology that receives an update every year.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Better YouTube Parental Control]]></title>
    <link href="https://sayzlim.net/better-youtube-parental-control/"/>
    <updated>2023-03-03T00:00:00+07:00</updated>
    <id>https://sayzlim.net/better-youtube-parental-control</id>
    <content type="html"><![CDATA[<p>I try my best not to allow my children to watch videos on YouTube. I don’t want to use YouTube Kids.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup> It doesn’t seem YouTube has figured out how to make their official app kids-friendly, but there is one way to have more control.</p>

<p>Sometimes I give up and allow the children to watch videos on YouTube. Here is the method I use to ensure they can only watch the videos I approve.</p>

<ol>
  <li>Search and download videos that you allow your kids to watch.</li>
  <li>Turn off the Wi-Fi or enable Airplane Mode before you hand over the device to your children.</li>
</ol>

<p>By doing so, you can limit the selection of videos to only the one you have downloaded to your device.</p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>YouTube Kids shouldn’t exist in the first place if there is no easy way to manage the content. Furthermore, the recommendation is awful, with most of their content quality below average. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Overpassing states in React]]></title>
    <link href="https://sayzlim.net/overpassing-states-react/"/>
    <updated>2023-02-21T00:00:00+07:00</updated>
    <id>https://sayzlim.net/overpassing-states-react</id>
    <content type="html"><![CDATA[<p>One of the lessons from <a href="https://www.joyofreact.com/">The Joy of React</a> course is to build a Wordle clone to practice state management. It’s a challenging project for someone who has never tried to make any projects from scratch.</p>

<p>State management has always been a hurdle for anyone who wants to learn to program because it can be highly confusing. However, especially in React, where the focus is more on building a web app, how you manage states will dictate the complexity of your components.</p>

<p>During the practice, I discovered I’ve passed too many states into the child components. For example, during the first part of the project, you create a <code class="language-plaintext highlighter-rouge">Game</code> component that renders a <code class="language-plaintext highlighter-rouge">Banner</code> component with a button that allows you to reset the game.</p>

<p>Here are the states I pass into the <code class="language-plaintext highlighter-rouge">Banner</code> component.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">Banner</span>
	<span class="na">gameResult</span><span class="p">=</span><span class="si">{</span><span class="nx">gameResult</span><span class="si">}</span>
	<span class="na">setGameResult</span><span class="p">=</span><span class="si">{</span><span class="nx">setGameResult</span><span class="si">}</span>
	<span class="na">guessCount</span><span class="p">=</span><span class="si">{</span><span class="nx">guessCount</span><span class="si">}</span>
	<span class="na">gameAnswer</span><span class="p">=</span><span class="si">{</span><span class="nx">gameAnswer</span><span class="si">}</span>
	<span class="na">setGameAnswer</span><span class="p">=</span><span class="si">{</span><span class="nx">setGameAnswer</span><span class="si">}</span>
	<span class="na">setGuessHistory</span><span class="p">=</span><span class="si">{</span><span class="nx">setGuessHistory</span><span class="si">}</span>
	<span class="na">setIsDisabled</span><span class="p">=</span><span class="si">{</span><span class="nx">setIsDisabled</span><span class="si">}</span>
	<span class="na">setGuessCount</span><span class="p">=</span><span class="si">{</span><span class="nx">setGuessCount</span><span class="si">}</span>
<span class="p">/&gt;</span>
</code></pre></div></div>

<p>I learned I needed those states because I tucked the game logic inside the <code class="language-plaintext highlighter-rouge">Banner</code> component. You can keep the code straightforward by passing the function that handles the game logic into the <code class="language-plaintext highlighter-rouge">Banner</code> component.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">resetGame</span><span class="p">()</span> <span class="p">{</span>
		<span class="kd">const</span> <span class="nx">nextGuessHistory</span> <span class="o">=</span> <span class="p">[];</span>
		<span class="nx">setGuessHistory</span><span class="p">(</span><span class="nx">nextGuessHistory</span><span class="p">);</span>

		<span class="kd">const</span> <span class="nx">nextGameResult</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Ongoing</span><span class="dl">'</span><span class="p">;</span>
		<span class="nx">setGameResult</span><span class="p">(</span><span class="nx">nextGameResult</span><span class="p">);</span>

		<span class="kd">const</span> <span class="nx">nextGameAnswer</span> <span class="o">=</span> <span class="nx">sample</span><span class="p">(</span><span class="nx">WORDS</span><span class="p">);</span>
		<span class="nx">setGameAnswer</span><span class="p">(</span><span class="nx">nextGameAnswer</span><span class="p">);</span>

		<span class="nx">setGuessCount</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
		<span class="nx">setIsDisabled</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
	<span class="p">}</span>

<span class="c1">// Rest of the code</span>
<span class="p">&lt;</span><span class="nc">Banner</span>
	<span class="na">gameResult</span><span class="p">=</span><span class="si">{</span><span class="nx">gameResult</span><span class="si">}</span>
	<span class="na">setGameResult</span><span class="p">=</span><span class="si">{</span><span class="nx">setGameResult</span><span class="si">}</span>
	<span class="na">guessCount</span><span class="p">=</span><span class="si">{</span><span class="nx">guessCount</span><span class="si">}</span>
	<span class="na">gameAnswer</span><span class="p">=</span><span class="si">{</span><span class="nx">gameAnswer</span><span class="si">}</span>
	<span class="na">resetGame</span><span class="p">=</span><span class="si">{</span><span class="nx">resetGame</span><span class="si">}</span>
<span class="p">/&gt;</span>	
</code></pre></div></div>

<p>I sensed that some of the components I created were too complicated for this project. So here are some signs that you’re also making the component complicated.</p>
<ul>
  <li>Passing too many <code class="language-plaintext highlighter-rouge">setState</code> functions into the child components.</li>
  <li>Put the logic that handles the parent states as part of the descendant components.</li>
</ul>

<p>I’ve changed my approach whenever I need to create a new component. I will only pass state value for the child components to render at first. Then, if I need the child components to update the result of the parent states, I can pass a function that wrangles all the <code class="language-plaintext highlighter-rouge">setState</code> functions together.</p>

<p>The exercise is refreshing because I haven’t attempted to build projects beyond writing HTML and CSS for static sites. Although I had experience putting things together in Jekyll, this is the second time I’m learning something by following a course.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Archive daily notes by months in Obsidian]]></title>
    <link href="https://sayzlim.net/archive-daily-notes-obsidian/"/>
    <updated>2023-02-17T00:00:00+07:00</updated>
    <id>https://sayzlim.net/archive-daily-notes-obsidian</id>
    <content type="html"><![CDATA[<p>When you enable the Daily Notes feature in Obsidian, it will create a new file in your selected location. The number of files can grow too big if you’re actively using Obsidian to take notes, so I use Hazel to create a rule to organize these notes into subfolders.</p>

<p><img src="https://images.sayzlim.net/2023/02/obsidian-sidebar.webp" alt="" title="List of subfolder in Obsidian sidebar" /></p>

<p>Ideally, I only want to see today’s daily note in the sidebar and keep the rest of the older files in a separate folder. So here is how I come up with this Hazel rule to manage the files in the daily notes directory.</p>

<p><img src="https://images.sayzlim.net/2023/02/hazel-sort-by-months.webp" alt="" title="Sort into monthly subfolder Hazel rule" /></p>

<p>I decided to use <code class="language-plaintext highlighter-rouge">YYYY-MM-MMM</code> for the date-created pattern because I want them to stay sorted by the file system. I also find that the subfolder pattern allows me to expand the search query when I want to locate the daily note on a certain date. For example, I can type “2022 Jan 22” or “2022-01-22” to search for the file created on that date.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Carbon Ads Component in Next.js Framework]]></title>
    <link href="https://sayzlim.net/carbon-ads-component-next-js/"/>
    <updated>2023-01-06T00:00:00+07:00</updated>
    <id>https://sayzlim.net/carbon-ads-component-next-js</id>
    <content type="html"><![CDATA[<p>Embedding any third-party JavaScript into a React-based framework requires you to create a script and append it to the element in your layout component.</p>

<p>If you’re reading this post, you may be taking the framework-first learning approach and are unfamiliar with loading the script without importing a component or a package.</p>

<p>This component should work with most of the React-based frameworks. Here is the <code class="language-plaintext highlighter-rouge">carbon.tsx</code> component that you can also find in this <a href="https://codesandbox.io/p/sandbox/carbon-next-js-75stb3?file=%2Fcomponents%2Fcarbon.tsx">CodeSandBox project</a>.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">useEffect</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useRouter</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">next/router</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">CarbonAds</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">useRouter</span><span class="p">();</span>

  <span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">isCarbonExist</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">"</span><span class="s2">#carbonads</span><span class="dl">"</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">!!</span><span class="nx">isCarbonExist</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">_carbonads</span><span class="p">.</span><span class="nx">refresh</span><span class="p">();</span>
      <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kd">const</span> <span class="nx">script</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="dl">"</span><span class="s2">script</span><span class="dl">"</span><span class="p">);</span>
    <span class="nx">script</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span>
      <span class="dl">"</span><span class="s2">//cdn.carbonads.com/carbon.js?serve=CVAIKKQM&amp;placement=carbonadsnet</span><span class="dl">"</span><span class="p">;</span>
    <span class="nx">script</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">_carbonads_js</span><span class="dl">"</span><span class="p">;</span>
    <span class="nx">script</span><span class="p">.</span><span class="k">async</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>

    <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="dl">"</span><span class="s2">#carbon-container</span><span class="dl">"</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">script</span><span class="p">);</span>
  <span class="p">},</span> <span class="p">[</span><span class="nx">router</span><span class="p">.</span><span class="nx">asPath</span><span class="p">]);</span>

  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">carbon-container</span><span class="dl">"</span><span class="o">&gt;&lt;</span><span class="sr">/div&gt;</span><span class="err">;
</span><span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">CarbonAds</span><span class="p">;</span>
</code></pre></div></div>

<p>Replace the value of <code class="language-plaintext highlighter-rouge">script.src</code> with the ad tag found on your dashboard. The component doesn’t do anything fancy. It simply creates an empty <code class="language-plaintext highlighter-rouge">div</code> container with <code class="language-plaintext highlighter-rouge">carbon-container</code> as the class name where we append them after the component is successfully mounted. It uses <code class="language-plaintext highlighter-rouge">[router.asPath]</code> as the dependency to refresh the ad when the <code class="language-plaintext highlighter-rouge">#carbonads</code> element exists on the page already.</p>

<h2 id="dealing-with-duplicate-ads">Dealing with Duplicate Ads</h2>
<p>One of the common problems you often see with implementing Carbon Ads component with this method is seeing duplicate ads. It happens because <code class="language-plaintext highlighter-rouge">reactStrictMode</code> is enabled by default when you’re working with newer React projects. If you’re using Next.js, you can turn it off in <code class="language-plaintext highlighter-rouge">next.config.js</code> to prevent duplicate ads from appearing.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/** @type {import('next').NextConfig} */</span>
<span class="kd">const</span> <span class="nx">nextConfig</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">reactStrictMode</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
<span class="p">};</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">nextConfig</span><span class="p">;</span>
</code></pre></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resolve Mackup Not Reading Preferences in macOS Monterey]]></title>
    <link href="https://sayzlim.net/mackup-syncing-monterey/"/>
    <updated>2022-12-29T00:00:00+07:00</updated>
    <id>https://sayzlim.net/mackup-syncing-monterey</id>
    <content type="html"><![CDATA[<p>You will notice that Mackup is no longer working if you sync your applications through Dropbox because the latest update has created another layer of security to take advantage of macOS Monterey privacy features.</p>

<p>The installed apps can’t read the preferences files because these files are located in a different Cloud Storage (for example, Dropbox)<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup> that requires additional permission if you want macOS to read these files.</p>

<p>You can resolve the permission issue by granting ``cfprefsd` with Full Disk Access.</p>

<p class="sidenote">It’s safe to grant permission to <code class="language-plaintext highlighter-rouge">cfprefsd</code> because it’s one of the tools used by the developers to read the macOS preferences files. You can <a href="https://discussions.apple.com/thread/4958344">read more about it here</a>.</p>

<p>You can locate the file by entering <code class="language-plaintext highlighter-rouge">which cfprefsd</code> in Terminal. By default, you can find the file at this path:</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/usr/sbin/cfprefsd
</code></pre></div></div>

<p>Open Security &amp; Privacy in the System Preferences and drag the <code class="language-plaintext highlighter-rouge">cfprefsd</code> into the <strong>Privacy =&gt; Full Disk Access</strong> tab. You can log out and login into your user account to see if this resolves the problem.</p>

<h2 id="custom-mackup-directory-path">Custom Mackup Directory Path</h2>
<p>If you are still having problems with reading the preferences, you want to consider uninstalling Mackup and restoring the preferences files back to their original paths.</p>

<ol>
  <li>Backup the latest preferences by entering <code class="language-plaintext highlighter-rouge">mackup backup</code> into Terminal. Enter <code class="language-plaintext highlighter-rouge">Yes</code> for all the preferences you want to backup.</li>
  <li>Enter <code class="language-plaintext highlighter-rouge">mackup uninstall</code> to restore the preferences file back to the default paths.</li>
  <li>Create a new file called <code class="language-plaintext highlighter-rouge">.mackup.cfg</code> in the Home directory  and update with the following details. You can replace the value of <code class="language-plaintext highlighter-rouge">directory</code> with the directory name you use — the default directory name is Mackup.</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[storage]
engine = file_system
path = Library/CloudStorage/Dropbox
directory = Mackup
</code></pre></div></div>

<ol>
  <li>Enter <code class="language-plaintext highlighter-rouge">mackup backup</code> to create symlinks pointing to the paths you’ve configured above.</li>
</ol>

<h2 id="restoring-backup">Restoring Backup</h2>
<ol>
  <li>To restore your preferences files on other macOS, you want to make sure that you have updated to the latest Dropbox and let the files complete syncing first.</li>
  <li>Create a <code class="language-plaintext highlighter-rouge">.mackup.cfg</code> and enter the same details you had before.</li>
  <li>Ensure that <code class="language-plaintext highlighter-rouge">cfprefsd</code> has the permission to Full Disk Access.</li>
  <li>Enter <code class="language-plaintext highlighter-rouge">mackup restore</code> to restore the files from Dropbox backup.</li>
</ol>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>For full discussion regarding this topic, you can learn from <a href="https://github.com/lra/mackup/issues/1858">this discussion</a> in the official repository. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing Karabiner Elements Issue on macOS Monterey]]></title>
    <link href="https://sayzlim.net/karabiner-elements-monterey-not-working/"/>
    <updated>2022-12-02T00:00:00+07:00</updated>
    <id>https://sayzlim.net/karabiner-elements-monterey-not-working</id>
    <content type="html"><![CDATA[<p>Karabiner Elements stopped working after I updated Dropbox because it couldn’t pick up the configuration files that I synced through Mackup via Dropbox.</p>

<p>Dropbox is now fully supported on macOS Monterey by taking advantage of Apple’s File Provider APIs, which means you need to grant additional permission to Karabiner Elements binary files to access the configuration files.</p>

<p><img src="https://images.sayzlim.net/2022/12/karabiner-elements-full-disk-access.webp" alt="" title="System Preferences Full Disk Access" /></p>

<p>You can fix the issues by granting <code class="language-plaintext highlighter-rouge">karabiner_grabber</code> and <code class="language-plaintext highlighter-rouge">karabiner_obsserver</code> full disk access. You can find this setting under Security &amp; Privacy in System Preferences.</p>

<p>You can locate these two binary files by using Finder and pressing <code class="language-plaintext highlighter-rouge">Command-Shift-G</code>, then you can paste the following path to open the folder:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/Library/Application Support/org.pqrs/Karabiner-Elements/bin/
</code></pre></div></div>

<p>Move these two files into the Full Disk Access window and restart Karabiner Elements. If you follow the steps above, Karabiner Elements will start working again in macOS Monterey.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to add a theme selection feature with vanilla JavaScript]]></title>
    <link href="https://sayzlim.net/theme-selection-javascript/"/>
    <updated>2022-08-26T00:00:00+07:00</updated>
    <id>https://sayzlim.net/theme-selection-javascript</id>
    <content type="html"><![CDATA[<p>In the previous post, I explained how to automatically set a dark theme using a CSS media query to check site visitors’ device preferences. Next, I will show you how to let users select the site theme by writing a few JavaScript functions.</p>

<p>You can also <a href="https://codepen.io/sayzlim/pen/XWEVmRL" title="Theme Selection Demo on CodePen">check out the demo</a> if you wish to skip the whole guide to show you how it works.</p>

<p>If you have followed the guideline to set a dark theme before, you will notice that we’ve used a <code class="language-plaintext highlighter-rouge">:not()</code> pseudo class to apply the dark theme when the <code class="language-plaintext highlighter-rouge">:root</code> element doesn’t contain <code class="language-plaintext highlighter-rouge">data-site-theme</code> as the attribute.</p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@media</span> <span class="p">(</span><span class="n">prefers-color-scheme</span><span class="o">:</span> <span class="n">dark</span><span class="p">)</span> <span class="p">{</span>
	<span class="nd">:root:not</span><span class="o">([</span><span class="nt">data-site-theme</span><span class="o">])</span> <span class="p">{</span>
		<span class="na">--theme-color-background-400</span><span class="p">:</span> <span class="si">#{</span><span class="nv">$color-charcoal-400</span><span class="si">}</span><span class="p">;</span>
		<span class="na">--theme-color-background-500</span><span class="p">:</span> <span class="si">#{</span><span class="nv">$color-charcoal-300</span><span class="si">}</span><span class="p">;</span>
		<span class="c1">// The rest of the dark theme color tokens</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p class="sidenote">In HTML, <code class="language-plaintext highlighter-rouge">:root</code> represents the <code class="language-plaintext highlighter-rouge">&lt;html&gt;</code> element and is identical to the selector html, except that <strong>its specificity is higher</strong>.</p>

<p>Building a feature for site visitors to select the site theme  requires a few requirements:</p>
<ol>
  <li>We need a way to store the user option.</li>
  <li>We need to add some UI elements for users to choose their preferred themes.</li>
  <li>We need to update the CSS to support the selected theme.</li>
</ol>

<h2 id="creating-theme-manager-object">Creating Theme Manager Object</h2>
<p>One of my favorite design patterns is <strong>Command Pattern</strong>, where you can encapsulate actions as objects. For me, it’s the most straightforward design pattern to learn if you’re new to JavaScript because you’re only dealing with methods to manipulate DOM. For example, here is the complete snippet to create a theme manager that I use on my site.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">_manager</span> <span class="o">=</span> <span class="p">{</span>
	<span class="na">setTheme</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">userColorScheme</span><span class="p">)</span> <span class="p">{</span>
		<span class="nx">localStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">user-color-scheme</span><span class="dl">'</span><span class="p">,</span> <span class="nx">userColorScheme</span><span class="p">);</span>
		<span class="nb">document</span>
				<span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">html</span><span class="dl">'</span><span class="p">)</span>
				<span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="dl">'</span><span class="s1">data-site-theme</span><span class="dl">'</span><span class="p">,</span> <span class="nx">userColorScheme</span><span class="p">);</span>
	<span class="p">},</span>
	<span class="na">setUserTheme</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span>
			<span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">user-color-scheme</span><span class="dl">'</span><span class="p">)</span>
		<span class="p">)</span> <span class="p">{</span>
			<span class="kd">let</span> <span class="nx">userColorScheme</span> <span class="o">=</span> <span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">user-color-scheme</span><span class="dl">'</span><span class="p">);</span>
			<span class="k">this</span><span class="p">.</span><span class="nx">setTheme</span><span class="p">(</span><span class="nx">userColorScheme</span><span class="p">);</span>
		<span class="p">}</span>
	<span class="p">},</span>
	<span class="na">resetUserTheme</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
		<span class="nx">localStorage</span><span class="p">.</span><span class="nx">removeItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">user-color-scheme</span><span class="dl">'</span><span class="p">);</span>
		<span class="nb">document</span>
				<span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">html</span><span class="dl">'</span><span class="p">)</span>
				<span class="p">.</span><span class="nx">removeAttribute</span><span class="p">(</span><span class="dl">'</span><span class="s1">data-site-theme</span><span class="dl">'</span><span class="p">);</span>
	<span class="p">},</span>
	<span class="na">init</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">setUserTheme</span><span class="p">();</span>
	<span class="p">},</span>
<span class="p">};</span>

<span class="nx">_manager</span><span class="p">.</span><span class="nx">init</span><span class="p">();</span>
</code></pre></div></div>

<p>Let’s take a look at each method and its purpose.</p>

<h3 id="settheme">setTheme</h3>
<p><code class="language-plaintext highlighter-rouge">setTheme</code> is the method to set the site theme. Using the built-in <code class="language-plaintext highlighter-rouge">localStorage</code> property, you create a local item called <code class="language-plaintext highlighter-rouge">user-color-scheme</code> with the value you pass into the method. You then use <code class="language-plaintext highlighter-rouge">querySelector</code> to apply the value to <code class="language-plaintext highlighter-rouge">data-site-theme</code> attribute. Here is an example of an updated html data attribute when you run <code class="language-plaintext highlighter-rouge">_manager.setTheme('dark')</code>.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span> <span class="na">data-site-theme=</span><span class="s">"dark"</span><span class="nt">&gt;</span>
</code></pre></div></div>

<p class="sidenote"><strong>Checking Local Storage</strong> — You can check the local storage value using Chrome Dev Tools and navigate to the Application tab. If you’re using Safari, you can check the Storage tab.</p>

<h3 id="setusertheme">setUserTheme</h3>
<p>The method’s purpose is to apply a user theme if we detect any values in the local storage. First, we check if there is any value by using <code class="language-plaintext highlighter-rouge">localStorage.getItem('user-color-scheme')</code> function. If we detect a value, we will apply them by calling the <code class="language-plaintext highlighter-rouge">setTheme</code> method we built earlier.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">setUserTheme</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span>
		<span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">user-color-scheme</span><span class="dl">'</span><span class="p">)</span>
	<span class="p">)</span> <span class="p">{</span>
		<span class="kd">let</span> <span class="nx">userColorScheme</span> <span class="o">=</span> <span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">user-color-scheme</span><span class="dl">'</span><span class="p">);</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">setTheme</span><span class="p">(</span><span class="nx">userColorScheme</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="resetusertheme">resetUserTheme</h3>
<p>Although it’s nice to allow site visitors to choose their theme, we also need to offer a way for them to reset their choice for the site to match their device’s theme setting. This method will remove <code class="language-plaintext highlighter-rouge">user-color-scheme</code> item from the local storage and remove the <code class="language-plaintext highlighter-rouge">data-site-theme</code> attribute from the document.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">resetUserTheme</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">localStorage</span><span class="p">.</span><span class="nx">removeItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">user-color-scheme</span><span class="dl">'</span><span class="p">);</span>
	<span class="nb">document</span>
			<span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">html</span><span class="dl">'</span><span class="p">)</span>
			<span class="p">.</span><span class="nx">removeAttribute</span><span class="p">(</span><span class="dl">'</span><span class="s1">data-site-theme</span><span class="dl">'</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="buttons-for-theme-selection">Buttons for Theme Selection</h2>
<p>With the theme manager ready to use, we can pass the methods into <code class="language-plaintext highlighter-rouge">onclick</code> event to set the user theme. You can wrap the SVG icon with the <code class="language-plaintext highlighter-rouge">button</code> element if you plan to use icons. Make sure to add <code class="language-plaintext highlighter-rouge">aria-label</code> attribute so the screen reader can read the button description.</p>

<p>Here is the structure of the buttons. Replace <code class="language-plaintext highlighter-rouge">SVG Icon</code> with the actual SVG value you can copy from free SVG icons sites like <a href="https://feathericons.com/">Feather Icons</a>.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;aside</span> <span class="na">class=</span><span class="s">"select-theme"</span><span class="nt">&gt;</span>
	<span class="nt">&lt;button</span>
		<span class="na">onclick=</span><span class="s">"_manager.resetUserTheme()"</span>
		<span class="na">aria-label=</span><span class="s">"Enable System Theme"</span>
	<span class="nt">&gt;</span>
		SVG Icon
	<span class="nt">&lt;/button&gt;</span>
	<span class="nt">&lt;button</span>
		<span class="na">onclick=</span><span class="s">"_manager.setTheme('light')"</span>
		<span class="na">aria-label=</span><span class="s">"Enable Light Theme"</span>
	<span class="nt">&gt;</span>
		SVG Icon
	<span class="nt">&lt;/button&gt;</span>
	<span class="nt">&lt;button</span>
		<span class="na">onclick=</span><span class="s">"_manager.setTheme('dark')"</span>
		<span class="na">aria-label=</span><span class="s">"Enable Dark Theme"</span>
	<span class="nt">&gt;</span>
		SVG Icon
	<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;/aside&gt;</span>
</code></pre></div></div>

<p>Following the guide above, you should have functional buttons that allow you to update your site theme. I didn’t cover how to style the buttons because it’s beyond the scope of this guide. I only want to show you how I put the structure together by taking inspiration from other sites.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to add dark theme with Sass and CSS variables]]></title>
    <link href="https://sayzlim.net/dark-theme-css-sass/"/>
    <updated>2022-08-15T00:00:00+07:00</updated>
    <id>https://sayzlim.net/dark-theme-css-sass</id>
    <content type="html"><![CDATA[<p>A few weeks ago, I added an option to toggle between dark and light themes to this blog. After exploring some options, I decide to store the color tokens with Sass and assign them to CSS variables.</p>

<h2 id="setting-up-design-tokens">Setting Up Design Tokens</h2>
<p>Design tokens are values you use for your design system. It serves as a guideline to keep your brand overall feel consistent.</p>

<p>If you’ve been hardcoding the color values in the CSS, you want to set those colors with CSS variables so you can reuse them in  your CSS file.</p>

<p>For a personal project where you’re the sole author, the design token name formats are flexible as long they make sense to you. I usually choose a few base colors and play around with the opacity value.</p>

<p class="sidenote"><strong>Color Picking Tips</strong> — You can adjust the lightness in the LCH value if you want something lighter or darker. You can use a tool like <a href="https://css.land/lch/">LCH Colour picker</a> to adjust the LCH values.</p>

<p>I store those design tokens as the Sass variables so they’re not exposed in the stylesheet.</p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Dark Colors</span>
<span class="nv">$color-orange-400</span><span class="p">:</span> <span class="nf">hsl</span><span class="p">(</span><span class="m">27</span><span class="o">,</span> <span class="m">100%</span><span class="o">,</span> <span class="m">79%</span><span class="p">);</span>
<span class="nv">$color-orange-400-10</span><span class="p">:</span> <span class="nf">hsla</span><span class="p">(</span><span class="m">27</span><span class="o">,</span> <span class="m">100%</span><span class="o">,</span> <span class="m">79%</span><span class="o">,</span> <span class="mi">.1</span><span class="p">);</span>
<span class="nv">$color-orange-400-50</span><span class="p">:</span> <span class="nf">hsla</span><span class="p">(</span><span class="m">27</span><span class="o">,</span> <span class="m">100%</span><span class="o">,</span> <span class="m">79%</span><span class="o">,</span> <span class="mi">.5</span><span class="p">);</span>
<span class="nv">$color-charcoal-400</span><span class="p">:</span> <span class="nf">hsl</span><span class="p">(</span><span class="m">0</span><span class="o">,</span> <span class="m">0%</span><span class="o">,</span> <span class="m">2%</span><span class="p">);</span>
<span class="nv">$color-charcoal-400-10</span><span class="p">:</span> <span class="nf">hsla</span><span class="p">(</span><span class="m">0</span><span class="o">,</span> <span class="m">0%</span><span class="o">,</span> <span class="m">2%</span><span class="o">,</span> <span class="mi">.1</span><span class="p">);</span>
<span class="nv">$color-charcoal-300</span><span class="p">:</span> <span class="nf">hsl</span><span class="p">(</span><span class="m">0</span><span class="o">,</span> <span class="m">0%</span><span class="o">,</span> <span class="m">11%</span><span class="p">);</span>
<span class="nv">$color-green-400</span><span class="p">:</span> <span class="nf">hsl</span><span class="p">(</span><span class="m">105</span><span class="o">,</span> <span class="m">100%</span><span class="o">,</span> <span class="m">75%</span><span class="p">);</span>
<span class="nv">$color-green-400-10</span><span class="p">:</span> <span class="nf">hsla</span><span class="p">(</span><span class="m">109</span><span class="o">,</span> <span class="m">100%</span><span class="o">,</span> <span class="m">77%</span><span class="o">,</span> <span class="mi">.1</span><span class="p">);</span>
<span class="nv">$color-dirtwhite-400</span><span class="p">:</span> <span class="nf">hsl</span><span class="p">(</span><span class="m">60</span><span class="o">,</span> <span class="m">36%</span><span class="o">,</span> <span class="m">96%</span><span class="p">);</span>
<span class="nv">$color-dirtwhite-400-30</span><span class="p">:</span> <span class="nf">hsla</span><span class="p">(</span><span class="m">60</span><span class="o">,</span> <span class="m">36%</span><span class="o">,</span> <span class="m">96%</span><span class="o">,</span> <span class="mi">.3</span><span class="p">);</span>

<span class="c1">// Light Colors</span>
<span class="nv">$color-linen-400</span><span class="p">:</span> <span class="nf">hsl</span><span class="p">(</span><span class="m">30</span><span class="o">,</span> <span class="m">58%</span><span class="o">,</span> <span class="m">93%</span><span class="p">);</span>
<span class="nv">$color-linen-500</span><span class="p">:</span> <span class="nf">hsl</span><span class="p">(</span><span class="m">33</span><span class="o">,</span> <span class="m">45%</span><span class="o">,</span> <span class="m">87%</span><span class="p">);</span>
<span class="nv">$color-linen-500-10</span><span class="p">:</span> <span class="nf">hsla</span><span class="p">(</span><span class="m">33</span><span class="o">,</span> <span class="m">45%</span><span class="o">,</span> <span class="m">87%</span><span class="o">,</span> <span class="mi">.1</span><span class="p">);</span>
<span class="nv">$color-oil-400</span><span class="p">:</span> <span class="nf">hsl</span><span class="p">(</span><span class="m">32</span><span class="o">,</span> <span class="m">29%</span><span class="o">,</span> <span class="m">10%</span><span class="p">);</span>
<span class="nv">$color-oil-400-30</span><span class="p">:</span> <span class="nf">hsla</span><span class="p">(</span><span class="m">32</span><span class="o">,</span> <span class="m">29%</span><span class="o">,</span> <span class="m">10%</span><span class="o">,</span> <span class="mi">.3</span><span class="p">);</span>
<span class="nv">$color-darkpurple-400</span><span class="p">:</span> <span class="nf">hsl</span><span class="p">(</span><span class="m">266</span><span class="o">,</span> <span class="m">45%</span><span class="o">,</span> <span class="m">59%</span><span class="p">);</span>
<span class="nv">$color-darkpurple-400-10</span><span class="p">:</span> <span class="nf">hsla</span><span class="p">(</span><span class="m">266</span><span class="o">,</span> <span class="m">45%</span><span class="o">,</span> <span class="m">59%</span><span class="o">,</span> <span class="mi">.1</span><span class="p">);</span>
<span class="nv">$color-darkpurple-400-50</span><span class="p">:</span> <span class="nf">hsla</span><span class="p">(</span><span class="m">266</span><span class="o">,</span> <span class="m">45%</span><span class="o">,</span> <span class="m">59%</span><span class="o">,</span> <span class="mi">.5</span><span class="p">);</span>
<span class="nv">$color-rose-400</span><span class="p">:</span> <span class="nf">hsl</span><span class="p">(</span><span class="m">353</span><span class="o">,</span> <span class="m">54%</span><span class="o">,</span> <span class="m">55%</span><span class="p">);</span>
<span class="nv">$color-rose-400-10</span><span class="p">:</span> <span class="nf">hsla</span><span class="p">(</span><span class="m">353</span><span class="o">,</span> <span class="m">54%</span><span class="o">,</span> <span class="m">55%</span><span class="o">,</span> <span class="mi">.1</span><span class="p">);</span>
</code></pre></div></div>

<h2 id="set-default-theme">Set Default Theme</h2>
<p>With color variables ready, you can set the default theme color in <code class="language-plaintext highlighter-rouge">:root</code> by assigning them to your design tokens as CSS variables. You can have fewer or more variables depending on how you style your site. The idea is to start with some simple tokens like background, accent, and text color. I used to have a dark theme as the default, but I decided to set the light theme as the default.</p>

<p class="sidenote">You can’t assign Sass variable directly to CSS variable. You have to <a href="https://sass-lang.com/documentation/interpolation">interpolate the variable</a> with <code class="language-plaintext highlighter-rouge">#{}</code> to make it work with CSS built-in variables.</p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">:root</span> <span class="p">{</span>
	<span class="na">--theme-color-background-400</span><span class="p">:</span> <span class="si">#{</span><span class="nv">$color-linen-400</span><span class="si">}</span><span class="p">;</span>
	<span class="na">--theme-color-background-500</span><span class="p">:</span> <span class="si">#{</span><span class="nv">$color-linen-500</span><span class="si">}</span><span class="p">;</span>
	<span class="na">--theme-color-background-500-10</span><span class="p">:</span> <span class="si">#{</span><span class="nv">$color-linen-500-10</span><span class="si">}</span><span class="p">;</span>
	<span class="na">--theme-color-accent-400</span><span class="p">:</span> <span class="si">#{</span><span class="nv">$color-darkpurple-400</span><span class="si">}</span><span class="p">;</span>
	<span class="na">--theme-color-accent-400-10</span><span class="p">:</span> <span class="si">#{</span><span class="nv">$color-darkpurple-400-10</span><span class="si">}</span><span class="p">;</span>
	<span class="na">--theme-color-accent-400-50</span><span class="p">:</span> <span class="si">#{</span><span class="nv">$color-darkpurple-400-50</span><span class="si">}</span><span class="p">;</span>
	<span class="na">--theme-color-foreground-400</span><span class="p">:</span> <span class="si">#{</span><span class="nv">$color-rose-400</span><span class="si">}</span><span class="p">;</span>
	<span class="na">--theme-color-foreground-400-10</span><span class="p">:</span> <span class="si">#{</span><span class="nv">$color-rose-400-10</span><span class="si">}</span><span class="p">;</span>
	<span class="na">--theme-color-text</span><span class="p">:</span> <span class="si">#{</span><span class="nv">$color-oil-400</span><span class="si">}</span><span class="p">;</span>
	<span class="na">--theme-color-shadow</span><span class="p">:</span> <span class="si">#{</span><span class="nv">$color-oil-400-30</span><span class="si">}</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>You’re going to replace the colors in your CSS files with those variables. If you’ve been passing the Sass color values directly, you want to take advantage of CSS variables. Instead of writing <code class="language-plaintext highlighter-rouge">color: $theme-color-text</code>, you can write it like this:</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">body</span> <span class="p">{</span>
	<span class="nl">color</span><span class="p">:</span> <span class="n">var</span><span class="p">(</span><span class="n">--theme-color-text</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="adding-dark-theme-support">Adding Dark Theme Support</h2>
<p>It’s straightforward to add dark theme support. I’m borrowing this <a href="https://ethanmarcotte.com/wrote/update-in/">technique Ethan Marcotte’s recent update</a>.</p>

<p>We want to assign a different color to the design tokens by using @media query to check the user device preferences. We’re will apply the dark color values when the <code class="language-plaintext highlighter-rouge">:root</code> or <code class="language-plaintext highlighter-rouge">html</code> document doesn’t have <code class="language-plaintext highlighter-rouge">data-site-theme</code> as the attribute.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@media</span> <span class="p">(</span><span class="n">prefers-color-scheme</span><span class="o">:</span> <span class="n">dark</span><span class="p">)</span> <span class="p">{</span>
	<span class="nd">:root:not</span><span class="o">([</span><span class="nt">data-site-theme</span><span class="o">])</span> <span class="p">{</span>
		<span class="na">--theme-color-background-400</span><span class="p">:</span> <span class="si">#{</span><span class="nv">$color-charcoal-400</span><span class="si">}</span><span class="p">;</span>
		<span class="na">--theme-color-background-500</span><span class="p">:</span> <span class="si">#{</span><span class="nv">$color-charcoal-300</span><span class="si">}</span><span class="p">;</span>
		<span class="na">--theme-color-background-500-10</span><span class="p">:</span> <span class="si">#{</span><span class="nv">$color-charcoal-400-10</span><span class="si">}</span><span class="p">;</span>
		<span class="na">--theme-color-accent-400</span><span class="p">:</span> <span class="si">#{</span><span class="nv">$color-orange-400</span><span class="si">}</span><span class="p">;</span>
		<span class="na">--theme-color-accent-400-10</span><span class="p">:</span> <span class="si">#{</span><span class="nv">$color-orange-400-10</span><span class="si">}</span><span class="p">;</span>
		<span class="na">--theme-color-accent-400-50</span><span class="p">:</span> <span class="si">#{</span><span class="nv">$color-orange-400-50</span><span class="si">}</span><span class="p">;</span>
		<span class="na">--theme-color-foreground-400</span><span class="p">:</span> <span class="si">#{</span><span class="nv">$color-green-400</span><span class="si">}</span><span class="p">;</span>
		<span class="na">--theme-color-foreground-400-10</span><span class="p">:</span> <span class="si">#{</span><span class="nv">$color-green-400-10</span><span class="si">}</span><span class="p">;</span>
		<span class="na">--theme-color-text</span><span class="p">:</span> <span class="si">#{</span><span class="nv">$color-dirtwhite-400</span><span class="si">}</span><span class="p">;</span>
		<span class="na">--theme-color-shadow</span><span class="p">:</span> <span class="si">#{</span><span class="nv">$color-dirtwhite-400-30</span><span class="si">}</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>You can check if your site theme is working by emulating the dark theme with Chrome Dev Tools by pressing <code class="language-plaintext highlighter-rouge">Command-Shift-P</code> and search for “emulate dark” for the command to emulate dark theme.</p>

<p>It’s not enough to automatically support dark theme. The next thing you want to do is to allow readers to choose the theme they want to keep when they visit your site. I will cover this topic in a separate post.</p>
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>The custom <code class="language-plaintext highlighter-rouge">data-site-theme</code> attribute will be useful when we want to build a feature to allow users to select a specific theme. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reading CSV as JSON with Alfred Script Filter]]></title>
    <link href="https://sayzlim.net/alfred-script-filter-read-csv/"/>
    <updated>2022-08-10T00:00:00+07:00</updated>
    <id>https://sayzlim.net/alfred-script-filter-read-csv</id>
    <content type="html"><![CDATA[<p>I write this guide for people who want to learn how to set up Alfred with Script Filter as the input. It’s perfectly fine if you’re not familiar with any scripting languages. The guide will show you how to convert CSV files into JSON objects that can populate Alfred search results.</p>

<h2 id="pick-a-scripting-language">Pick a Scripting Language</h2>
<p>You can write the script in any language you’re comfortable with and run it through a Unix shell. For this tutorial, we’re going to use Python 3. The easiest way to install Python is through a package manager like Homebrew. You can <a href="https://docs.python-guide.org/starting/install3/osx/">refer to this guide to install Python on macOS</a>.</p>

<h2 id="workflow-setup">Workflow Setup</h2>
<p>Create a blank workflow and add Script Filter input with keywords to trigger the workflow. Write this down in the script input field.</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 main.py
</code></pre></div></div>

<p><img src="https://images.sayzlim.net/2022/08/alfred-script-filter-reveal-workflow.webp" alt="" title="Reveal Alfred Workflow Folder" /></p>

<p>Click on the folder icon as seen from the screenshot above to reveal the workflow directory. Create a new Python file in the workflow folder and name it <code class="language-plaintext highlighter-rouge">main.py</code>. The main process will be written in this script.</p>

<p>There are two things we want to achieve in this script:</p>
<ol>
  <li>The workflow must be able to read the file with a relative path using tilde so any user can use it.</li>
  <li>The workflow must be able to convert the CSV into JSON for Alfred to filter the results.</li>
</ol>

<p>Here is the <code class="language-plaintext highlighter-rouge">sample.csv</code> content that we’ll be using for this tutorial. You can store it on the desktop.</p>

<p><a href="https://s3.sayzlim.net/f/sample.csv">Download CSV</a></p>

<h2 id="python-script">Python Script</h2>
<p>Here is a Python script to read a CSV file from your selected source on your machine. I’m going to break down each part of the code, so they make sense, and you can modify it to match your workflow.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">os.path</span>
<span class="kn">import</span> <span class="nn">json</span>
<span class="kn">import</span> <span class="nn">csv</span>

<span class="n">csv_file_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">expanduser</span><span class="p">(</span><span class="s">"~/Desktop/sample.csv"</span><span class="p">)</span>

<span class="n">result</span> <span class="o">=</span> <span class="p">{</span>
	<span class="s">"items"</span><span class="p">:</span> <span class="p">[]</span>
<span class="p">}</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">csv_file_path</span><span class="p">)</span> <span class="k">as</span> <span class="n">csv_file</span><span class="p">:</span>
	<span class="n">csv_reader</span> <span class="o">=</span> <span class="n">csv</span><span class="p">.</span><span class="n">DictReader</span><span class="p">(</span><span class="n">csv_file</span><span class="p">)</span>
	<span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">csv_reader</span><span class="p">:</span>
		<span class="n">row_item</span> <span class="o">=</span> <span class="p">{</span>
			<span class="s">"uid"</span><span class="p">:</span> <span class="n">row</span><span class="p">[</span><span class="s">'title'</span><span class="p">],</span>
			<span class="s">"title"</span><span class="p">:</span> <span class="n">row</span><span class="p">[</span><span class="s">"title"</span><span class="p">],</span>
			<span class="s">"subtitle"</span><span class="p">:</span> <span class="n">row</span><span class="p">[</span><span class="s">"subtitle"</span><span class="p">],</span>
			<span class="s">"match"</span> <span class="p">:</span> <span class="n">row</span><span class="p">[</span><span class="s">"title"</span><span class="p">]</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">row</span><span class="p">[</span><span class="s">"platform"</span><span class="p">],</span>
			<span class="s">"arg"</span><span class="p">:</span> <span class="n">row</span><span class="p">[</span><span class="s">"title"</span><span class="p">],</span>
			<span class="s">"text"</span><span class="p">:</span> <span class="p">{</span>
					<span class="s">"copy"</span><span class="p">:</span> <span class="n">row</span><span class="p">[</span><span class="s">"price"</span><span class="p">]</span>
				<span class="p">}</span>
			<span class="p">}</span>
		<span class="n">result</span><span class="p">[</span><span class="s">"items"</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="n">row_item</span><span class="p">)</span>

<span class="n">output</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">output</span><span class="p">)</span>
</code></pre></div></div>

<p>First, we must import the modules we need to process the JSON and CSV files. These modules allow us to run the functions, read CSV files and convert them into JSON. We also want to expand the tilde using the <code class="language-plaintext highlighter-rouge">os.path.expanduser</code> function so this script can work for all users.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">os.path</span>
<span class="kn">import</span> <span class="nn">json</span>
<span class="kn">import</span> <span class="nn">csv</span>

<span class="n">csv_file_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">expanduser</span><span class="p">(</span><span class="s">"~/Desktop/sample.csv"</span><span class="p">)</span>
</code></pre></div></div>

<p>Alfred accepts JSON as the output of the script. The result must be stored inside the <code class="language-plaintext highlighter-rouge">items</code> key for Alfred to show them when you search for it. The following script declares a <code class="language-plaintext highlighter-rouge">result</code> dictionary variable with <code class="language-plaintext highlighter-rouge">items</code> as an array.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>
	<span class="s">"items"</span><span class="p">:</span> <span class="p">[]</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Now we want to populate the <code class="language-plaintext highlighter-rouge">items</code> key with the row item from the <code class="language-plaintext highlighter-rouge">csv_file_path</code>. The most important part is the value you assign for each key in the <code class="language-plaintext highlighter-rouge">row_item</code>. You can learn more about <a href="https://www.alfredapp.com/help/workflows/inputs/script-filter/json/">Script Filter JSON Format</a>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">csv_file_path</span><span class="p">)</span> <span class="k">as</span> <span class="n">csv_file</span><span class="p">:</span>
	<span class="n">csv_reader</span> <span class="o">=</span> <span class="n">csv</span><span class="p">.</span><span class="n">DictReader</span><span class="p">(</span><span class="n">csv_file</span><span class="p">)</span>
	<span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">csv_reader</span><span class="p">:</span>
		<span class="n">row_item</span> <span class="o">=</span> <span class="p">{</span>
			<span class="s">"uid"</span><span class="p">:</span> <span class="n">row</span><span class="p">[</span><span class="s">'title'</span><span class="p">],</span>
			<span class="s">"title"</span><span class="p">:</span> <span class="n">row</span><span class="p">[</span><span class="s">"title"</span><span class="p">],</span>
			<span class="s">"subtitle"</span><span class="p">:</span> <span class="n">row</span><span class="p">[</span><span class="s">"subtitle"</span><span class="p">],</span>
			<span class="s">"match"</span> <span class="p">:</span> <span class="n">row</span><span class="p">[</span><span class="s">"title"</span><span class="p">]</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">row</span><span class="p">[</span><span class="s">"platform"</span><span class="p">],</span>
			<span class="s">"arg"</span><span class="p">:</span> <span class="n">row</span><span class="p">[</span><span class="s">"title"</span><span class="p">],</span>
			<span class="s">"text"</span><span class="p">:</span> <span class="p">{</span>
					<span class="s">"copy"</span><span class="p">:</span> <span class="n">row</span><span class="p">[</span><span class="s">"price"</span><span class="p">]</span>
				<span class="p">}</span>
			<span class="p">}</span>
		<span class="n">result</span><span class="p">[</span><span class="s">"items"</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="n">row_item</span><span class="p">)</span>
</code></pre></div></div>

<p>The advantage of using Script Filter is that we can tell Alfred which value to use for the workflow. Here are some things that you want to consider modifying:</p>

<ul>
  <li>Define the value that you want to pass in <code class="language-plaintext highlighter-rouge">arg</code>.</li>
  <li>Pass multiple values into the <code class="language-plaintext highlighter-rouge">match</code> key to expand what Alfred can search. In the following example, we combine row title and platform values.</li>
  <li>Define the text result you receive from copying <code class="language-plaintext highlighter-rouge">Command-C</code> and displaying large type with <code class="language-plaintext highlighter-rouge">Command-L</code> in the <code class="language-plaintext highlighter-rouge">text</code> key.</li>
</ul>

<p>Once the items are populated, you can convert them into JSON using <code class="language-plaintext highlighter-rouge">json.dumps(result)</code> and print the result for Alfred to pick up.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">output</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">output</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="example-use-case">Example Use Case</h2>

<p><img src="https://images.sayzlim.net/2022/08/alfred-script-filter-workflow.webp" alt="" title="Alfred Script Filter Result" /></p>

<p>Once you have the Script Filter input configured, you can chain them with actions based on the argument you’ve defined. For example, I have a CSV file containing the list of sites in the ad network. I can pass the site ID as the argument and open the dashboard URL to check the site performance.</p>

<p>If you use CRM like HubSpot, you can also export the list of customers you manage and store them on your machine. Instead of using HubSpot search, you can filter the result right from Alfred. You can be creative with the modifiers:</p>
<ul>
  <li>Create an action to accept customer ID to take you to the HubSpot contact page.</li>
  <li>Set the <code class="language-plaintext highlighter-rouge">text</code> key to the contact email address so you can copy it from the search result.</li>
  <li>Display the company name as the subtitle of the search result.</li>
</ul>

<p>The advantage of Script Filter input is the flexibility to modify the value of the search result. It’s possible to build a fancier workflow with API, however, I see that processing CSV as the most practical use case for most people.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to sort CSS properties with Prettier in Sublime Text]]></title>
    <link href="https://sayzlim.net/sort-css-prettier-sublime-text/"/>
    <updated>2022-08-06T00:00:00+07:00</updated>
    <id>https://sayzlim.net/sort-css-prettier-sublime-text</id>
    <content type="html"><![CDATA[<p>I’ve been searching for a replacement for CSScomb because it is no longer actively being maintained. It turns out Prettier can also accomplish the same work by combining it with PostCSS.</p>

<p>We’ll be using <a href="https://prettier.io/" title="Prettier · Opinionated Code Formatter">Prettier</a> as the code formatter. I’m going to assume that you’re not familiar with configuring Sublime Text packages, and I will provide all the details you need to get this setup working.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<ol id="markdown-toc">
  <li><a href="#getting-started" id="markdown-toc-getting-started">Getting Started</a>    <ol>
      <li><a href="#nodejs" id="markdown-toc-nodejs">Node.js</a></li>
      <li><a href="#required-node-packages" id="markdown-toc-required-node-packages">Required Node Packages</a></li>
      <li><a href="#jsprettier-sublime-package" id="markdown-toc-jsprettier-sublime-package">JsPrettier Sublime Package</a></li>
    </ol>
  </li>
  <li><a href="#sublime-text-settings" id="markdown-toc-sublime-text-settings">Sublime Text Settings</a>    <ol>
      <li><a href="#jsprettier-settings" id="markdown-toc-jsprettier-settings">JsPrettier Settings</a></li>
      <li><a href="#additional-prettier-cli-arguments" id="markdown-toc-additional-prettier-cli-arguments">Additional Prettier CLI Arguments</a></li>
    </ol>
  </li>
</ol>

<h2 id="getting-started">Getting Started</h2>
<p>Sublime Text is just a text editor. Unlike Visual Studio Code which is built with Electron, it doesn’t support Node.js by default. <em>Therefore, most installed packages will not work out of the box.</em> Sometimes you have to install the dependencies on your local machine before you can run them.</p>

<h3 id="nodejs">Node.js</h3>
<p>The best way to install <a href="https://nodejs.org/en/">Node.js</a> is using Node version manager so you can update and switch between versions easily. I’ve written a <a href="/setup-macos-web-development/">comprehensive guide to set up your development environment for macOS</a> if you wish to learn more about it.</p>

<h3 id="required-node-packages">Required Node Packages</h3>
<p>You need these three packages to format and sort the CSS in the file.</p>
<ul>
  <li>prettier</li>
  <li>postcss</li>
  <li>prettier-plugin-css-order</li>
</ul>

<p>You want to install them globally on your machine because it’s not dependent on any projects.<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup> Run the following commands to install them all at once.</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">--global</span> prettier postcss prettier-plugin-css-order
</code></pre></div></div>

<p>To confirm that they are installed correctly, you can run this command to list the installed global packages.</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm list <span class="nt">-g</span> <span class="nt">--depth</span> 0
</code></pre></div></div>

<h3 id="jsprettier-sublime-package">JsPrettier Sublime Package</h3>

<p><img src="https://images.sayzlim.net/2022/08/jsprettier-install.webp" alt="" title="Install JsPrettier with Package Control" /></p>

<p>Install <a href="https://packagecontrol.io/packages/JsPrettier" title="JsPrettier - Packages - Package Control">JsPrettier Sublime Package</a>. They provide several methods to install the package, but I recommend using <a href="https://packagecontrol.io/" title="Package Control - the Sublime Text package manager">Package Control</a> to manage your Sublime Text packages. It’s a package manager that makes it easy to install, remove, and update your installed Sublime packages.</p>

<h2 id="sublime-text-settings">Sublime Text Settings</h2>

<h3 id="jsprettier-settings">JsPrettier Settings</h3>
<p>JsPrettier doesn’t work out of the box after you’ve installed it. You still have to configure the <code class="language-plaintext highlighter-rouge">prettier_cli_path</code> and <code class="language-plaintext highlighter-rouge">node_path</code> to tell Sublime Text to run the command to process your CSS files.</p>

<p>You can access the package setting by pressing <kbd>Command-Shift-P</kbd> to call the Command Palette then type <code class="language-plaintext highlighter-rouge">jsprettier settings - side-by-side</code> to open the default and user settings side by side.</p>

<p><img src="https://images.sayzlim.net/2022/08/jsprettier-side-by-side.webp" alt="" title="JsPrettier Side by Side Settings in Sublime Text" /></p>

<p>To customize JsPrettier package, you need to override the default settings by passing the value into the associated key. For example, here is how you want to set up the paths if you have installed Node.js with N as the version manager:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"prettier_cli_path"</span><span class="p">:</span><span class="w"> </span><span class="s2">"~/.n/bin/prettier"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"node_path"</span><span class="p">:</span><span class="w"> </span><span class="s2">"~/.n/bin/node"</span><span class="p">,</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p class="sidenote"><strong>Where can I find the package paths?</strong> If you’re uncertain about the path of <code class="language-plaintext highlighter-rouge">prettier</code> and <code class="language-plaintext highlighter-rouge">node</code>, you can type <code class="language-plaintext highlighter-rouge">which prettier node</code> in Terminal to print their paths.</p>

<h3 id="additional-prettier-cli-arguments">Additional Prettier CLI Arguments</h3>
<p>You should be able to use JsPrettier package in Sublime Text now, but it still doesn’t sort the CSS properties. The main feature of <code class="language-plaintext highlighter-rouge">prettier-plugin-css-order</code> is to add two configurable keys to Prettier:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">order</code> defaults to <code class="language-plaintext highlighter-rouge">concentric-css</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">keepOverrides</code> defaults to <code class="language-plaintext highlighter-rouge">true</code>, for a new codebase <code class="language-plaintext highlighter-rouge">false</code> is recommended.</li>
</ul>

<p>We want to tell Prettier to always sort the CSS by passing <code class="language-plaintext highlighter-rouge">order</code> as the additional argument. It’s based on <a href="https://github.com/Siilwyn/css-declaration-sorter/">css-declaration-sorter</a>. You can set the order to either <code class="language-plaintext highlighter-rouge">alphabetical</code>, <code class="language-plaintext highlighter-rouge">smacss</code>, or <code class="language-plaintext highlighter-rouge">concentric-css</code></p>

<p>Here is what the user settings look like after passing the <code class="language-plaintext highlighter-rouge">--order</code> value.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"prettier_cli_path"</span><span class="p">:</span><span class="w"> </span><span class="s2">"~/.n/bin/prettier"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"node_path"</span><span class="p">:</span><span class="w"> </span><span class="s2">"~/.n/bin/node"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"additional_cli_args"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"--order"</span><span class="p">:</span><span class="w"> </span><span class="s2">"smacss"</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Save the JsPrettier user settings and run Prettier to confirm it’s working. There is an option to format code on save by setting <code class="language-plaintext highlighter-rouge">auto_format_on_save</code> to <code class="language-plaintext highlighter-rouge">true</code>, but I prefer to sort the CSS manually by searching for <code class="language-plaintext highlighter-rouge">JSPrettier: Format Code</code> with the command palette.</p>

<p>If you have any questions about this guide, you can send me a DM on Twitter.</p>
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>Sublime Text is my favorite text editor because it’s lightweight and fast. However, it can be challenging to configure installed packages without understanding how preferences are stored in Sublime Text. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>I write a small amount of CSS daily to help publishers fix their ad format issues. If you use the package only on your machine, you can install them as a global package. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to create a robust and reliable Keyboard Maestro macro]]></title>
    <link href="https://sayzlim.net/keyboard-maestro-macro-tips/"/>
    <updated>2022-08-04T00:00:00+07:00</updated>
    <id>https://sayzlim.net/keyboard-maestro-macro-tips</id>
    <content type="html"><![CDATA[<p>Building a reliable macro can be challenging if you have to run a series of sub-macros together. I’ve written my fair share of macros and put together a series of tips to help you efficiently build and debug a macro.</p>

<h2 id="setup-the-macro-default-state">Setup The Macro Default State</h2>
<p>You want to <strong>set a consistent default state</strong> if you’re building a macro that involves a series of sub-macros. Setting a default state is like moving the chess pieces to the starting position after you’ve finished the game.</p>

<p>Setting a default state is essential if the macro you build needs to deal with multiple application windows running in full screen.</p>

<p><img src="https://images.sayzlim.net/2022/08/keyboard-maestro-default-state.webp" alt="" title="Keyboard Maestro Macro Default State" /></p>

<p>Here is an example.</p>

<p>You want to set up a workspace that involves creating and resizing multiple Safari windows on a different screen. The default state will be a Safari application with all the windows closed. The macro will start by pressing <code class="language-plaintext highlighter-rouge">Command-Option-Q</code> to quit and close all windows.</p>

<p>The same can be said when you’re building a macro that pulls data from the spreadsheet tab and enter them into a different application. The default state is to close irrelevant documents and browser tabs. Then you can launch the applications for the macro to run.</p>

<h2 id="set-between-actions-delay">Set Between Actions Delay</h2>
<p>Another common problem with macro is that they can run too fast. Sometimes the application won’t be ready to respond to your macro in time and create unexpected behaviors. For example, the macro will type the value before the input field is focused.</p>

<p>The workaround is pretty simple. You can set an action delay between macro to 0.2 seconds at the beginning of the macro. Play around with the value until you can ensure that the macro runs consistently.</p>

<p class="sidenote">You can also resolve these unexpected behaviors by implementing control flows. I’ve published a <a href="https://sayzlim.net/building-keyboard-maestro-macros-tips/">collection of tips</a> to help you build your first macro before. Although it hasn’t been updated for a while, these tips are still relevant today.</p>

<h2 id="declutter-with-local-or-instance-variables">Declutter with Local or Instance Variables</h2>
<p>Variables are wonderful pieces of Keyboard Maestro. You can use it to combine a series of macros to build a simple application.</p>

<p>The common mistake with people new to Keyboard Maestro is saving variables globally. You can check if you’ve been using global variables by opening the <strong>Preferences Variables</strong> settings. Most of the time, you don’t have to expose those variables to every macro.</p>

<p><img src="https://images.sayzlim.net/2022/08/keyboard-maestro-variables-preferences.webp" alt="" title="Keyboard Maestro Value Preferences" /></p>

<p>The solution for the problem is to prepend <code class="language-plaintext highlighter-rouge">Local</code> or <code class="language-plaintext highlighter-rouge">Instance</code> to the variable so it’s available only for the executing macro during the runtime.<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">1</a></sup></p>

<p>The difference between these two is how accessible they are to the executing macro. Most of the time, you can use local variables, but you want to use instance variables when:</p>

<ul>
  <li>You want the variable accessible by the sub-macros from the executing macro.</li>
  <li>You want to keep the variable unique for each execution. For example, assuming you have a macro where you save file name to a variable called <code class="language-plaintext highlighter-rouge">InstanceFileName</code>. You can run the macro multiple times and each <code class="language-plaintext highlighter-rouge">InstanceFileName</code> will be unique even if macros run concurrently. Instance variables are useful when you have a macro that does many things in the background and you prefer not to wait for them to run sequentially.</li>
</ul>

<h2 id="debug-with-value-inspector">Debug with Value Inspector</h2>
<p>Once you start chaining multiple actions together, you will notice that you often need to check the value of the variables or tokens you plan to use. Keyboard Maestro has a built-in inspector where you can preview the value of variables. You can enable them by pressing <kbd>Command - 6</kbd> or selecting it from <strong>Window - Value Inspector</strong>.</p>

<p><img src="https://images.sayzlim.net/2022/08/keyboard-maestro-value-inspector.webp" alt="" title="Keyboard Maestro Value Inspector" /></p>

<p>Keyboard Maestro also comes with a <a href="https://wiki.keyboardmaestro.com/Tokens#List_of_Tokens">variety of tokens</a> that you can use to set up your macro. A common token you want to use is the <code class="language-plaintext highlighter-rouge">ICUDateTime</code> token, where you can customize the date format. For example, you can enter <code class="language-plaintext highlighter-rouge">%ICUDateTime%yyyy-MM-dd% </code> in the inspector to see what it looks like before implementing it in the macro.</p>
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:2" role="doc-endnote">
      <p>You can <a href="https://wiki.keyboardmaestro.com/manual/Variables">learn more about variables</a> from Keyboard Maestro documentation. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to fix EventMachine C extension error in Jekyll]]></title>
    <link href="https://sayzlim.net/fix-eventmachine-c-extension-error/"/>
    <updated>2022-07-30T00:00:00+07:00</updated>
    <id>https://sayzlim.net/fix-eventmachine-c-extension-error</id>
    <content type="html"><![CDATA[<p>Jekyll comes with a built-in live reload feature to help you preview the change as you make a change to your codes. I encountered an error after running <code class="language-plaintext highlighter-rouge">bundle update</code> recently, and it turns out the fix is straightforward.</p>

<p><img src="https://images.sayzlim.net/2022/07/jekyll-gem-event-machine-error.webp" alt="" title="EventMachine C error logs in Terminal" /></p>

<p><strong>You can resolve most of the errors</strong> by updating affected gems to the latest version.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup> However, <a href="https://github.com/eventmachine/eventmachine" title="eventmachine/eventmachine: EventMachine: fast, simple event-processing library for Ruby programs">EventMachine</a> is not exactly being actively maintained, so we don’t always receive the latest version if you’re using <a href="https://rubygems.org/">RubyGems.org</a> as the source for your Gemfile.</p>

<p>You can fix the error by updating the eventmachine gem source to the official GitHub repository. Here is the line you want to paste into the Gemfile.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem 'eventmachine', github: 'eventmachine/eventmachine'
</code></pre></div></div>

<p>After that, you can run <code class="language-plaintext highlighter-rouge">bundle update</code> to fetch the latest version of every gem in your Jekyll project.</p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>Sometimes you want to revert to the older version if the latest version is the cause of the errors. <a href="https://bundler.io/man/gemfile.5.html" title="Bundler: gemfile">Check out the official page</a> to learn more about Gemfile. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Obsidian]]></title>
    <link href="https://sayzlim.net/getting-started-obsidian/"/>
    <updated>2022-07-06T00:00:00+07:00</updated>
    <id>https://sayzlim.net/getting-started-obsidian</id>
    <content type="html"><![CDATA[<p>I’ve switched from Evernote to Obsidian because I like the idea of building a knowledge base on top of folders and Markdown files. Here are some tips to help you get started if you’re new to Obsidian.</p>

<ul id="markdown-toc">
  <li><a href="#daily-notes--fleeting-notes" id="markdown-toc-daily-notes--fleeting-notes">Daily Notes / Fleeting Notes</a></li>
  <li><a href="#basic-folders-structure" id="markdown-toc-basic-folders-structure">Basic Folders Structure</a></li>
  <li><a href="#map-and-remember-essential-shortcuts" id="markdown-toc-map-and-remember-essential-shortcuts">Map and Remember Essential Shortcuts</a>    <ul>
      <li><a href="#basic-shortcuts" id="markdown-toc-basic-shortcuts">Basic Shortcuts</a></li>
      <li><a href="#navigation-shortcuts" id="markdown-toc-navigation-shortcuts">Navigation Shortcuts</a></li>
      <li><a href="#formatting-shortcuts" id="markdown-toc-formatting-shortcuts">Formatting Shortcuts</a></li>
    </ul>
  </li>
  <li><a href="#personalize-with-theme" id="markdown-toc-personalize-with-theme">Personalize with Theme</a></li>
  <li><a href="#obsidian-graph-view" id="markdown-toc-obsidian-graph-view">Obsidian Graph View</a></li>
  <li><a href="#essential-plugins" id="markdown-toc-essential-plugins">Essential Plugins</a></li>
</ul>

<h2 id="daily-notes--fleeting-notes">Daily Notes / Fleeting Notes</h2>
<p>Enable Daily Notes from the core plugins, so it creates a new note whenever you open Obsidian. Some people also refer to daily notes as fleeting notes.</p>

<p><img src="https://images.sayzlim.net/2022/07/obsidian-daily-note-option.webp" alt="" title="Obsidian Daily's Note Options" /></p>

<p><strong>Set the default new note location</strong> inside the Fleeting folder to prevent it from cluttering the top directory.</p>

<p>Fleeting note is a scratchpad that lets you <strong>capture the ideas and information that resonates</strong> with you throughout the day.</p>

<p>There is no structure. There is no editing. There is no filter. You capture your best and worst ideas in this note. You will schedule a time to organize these ideas later.</p>

<h2 id="basic-folders-structure">Basic Folders Structure</h2>
<p>Now you have an outlet to capture your ideas with fleeting notes. You need to organize them every day or once a week. It’s your choice. Find what works for you.</p>

<p><img src="https://images.sayzlim.net/2022/07/obsidian-folders-structure.webp" alt="" title="Obsidian Folders Structure" /></p>

<p>Keep the directory structures as simple as possible if you’re new to building a knowledge base. I recommend creating these folders:</p>

<ul>
  <li><strong>Fleeting</strong> for fleeting notes.</li>
  <li><strong>Grow</strong> for notes you create by expanding the ideas you captured from fleeting notes.</li>
  <li><strong>Resources</strong> for any information that you wish to keep for references.</li>
</ul>

<p>It’s a simplified version of CODE (Collect, Organize, Distill, Express) concept from Building a Second Brain by Tiago Forte. The structure above allows you to start capturing notes without feeling overwhelmed by the ideas of organizing them.</p>

<h2 id="map-and-remember-essential-shortcuts">Map and Remember Essential Shortcuts</h2>
<p>You should memorize some shortcuts when you first start using Obsidian. Map them under Hotkeys options if they’re not available.</p>

<h3 id="basic-shortcuts">Basic Shortcuts</h3>
<ul>
  <li><kbd>Command-Shift-P</kbd> to open the command palette.</li>
  <li><kbd>Command-O</kbd> to open a file in the existing pane.</li>
  <li><kbd>Command-Shift-F</kbd> to search in all files.</li>
  <li><kbd>Command-G</kbd> to toggle the graph.</li>
  <li><kbd>Command-R</kbd> to toggle reading view.</li>
  <li><kbd>Command-Shift-M</kbd> to move the file to another folder.</li>
</ul>

<h3 id="navigation-shortcuts">Navigation Shortcuts</h3>
<ul>
  <li><kbd>Command-Option-Arrow</kbd> to navigate note history. You can remap it to <kbd>Command-Shift-Bracket</kbd> to match browser shortcuts.</li>
</ul>

<h3 id="formatting-shortcuts">Formatting Shortcuts</h3>
<p>Map the following shortcut so you can start highlighting notes.</p>
<ul>
  <li><kbd>Command-L</kbd> to highlight notes.</li>
</ul>

<p>You can learn more about <a href="https://help.obsidian.md/How+to/Format+your+notes">formatting your notes</a> from the official guide.</p>

<h2 id="personalize-with-theme">Personalize with Theme</h2>
<p>Obsidian comes up with many beautiful community themes. Browse the collection and choose the one that showcases your personality.</p>

<p><img src="https://images.sayzlim.net/2022/07/obsidian-theme-option.webp" alt="" title="Theme Selection in Obsidian" /></p>

<h2 id="obsidian-graph-view">Obsidian Graph View</h2>
<p>Graph View is useless initially if you’re new to building a knowledge base with Obsidian. It becomes more valuable as you continue making notes’ connections through WikiLinks and tags. It takes time to see the benefit of Graph View. Pick one note-taking method to build these connections — I personally use <a href="https://zettelkasten.de/posts/overview/">Zettelkasten Method</a>.</p>

<h2 id="essential-plugins">Essential Plugins</h2>
<p>There are two types of plugins. Core plugins are available in Obsidian by default. Community plugins are built by the community. You need to install them before you can use them. I don’t recommend adding too many community plugins because it may slow down Obsidian.</p>

<p>Here are some core plugins you should enable.</p>
<ul>
  <li>Daily notes — Create and open today’s daily note.</li>
  <li>Tag pane — Display your tags and their number of occurrences.</li>
  <li>Backlinks — Show links from other files to this file.</li>
</ul>

<p>You can click Browse from the community plugins options page to install community plugins. Here are some community plugins that you should consider installing.</p>
<ul>
  <li>Typewriter Scroll — It keeps the cursor centered in the editor view.</li>
  <li>Dynamic Table of Contents — Generates Table of Contents based on the document’s headings. I use this in the beginning when I capture long-form for notes.</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Repeat Actions and Macros in Keyboard Maestro]]></title>
    <link href="https://sayzlim.net/loop-repeat-macros-keyboard-maestro/"/>
    <updated>2022-07-01T00:00:00+07:00</updated>
    <id>https://sayzlim.net/loop-repeat-macros-keyboard-maestro</id>
    <content type="html"><![CDATA[<p>There are several ways to repeat macro and actions in Keyboard Maestro, and the method is different depending on your use case. I’m going to cover my favorite method in this post.</p>

<p>Three main actions that can help you repeat a macro in Keyboard Maestro.</p>
<ul>
  <li>Repeat — Repeat a macro for a specified number amount of times.</li>
  <li>Until — Repeat a macro <strong>until</strong> it meets a specified condition.</li>
  <li>While — Repeat a macro <strong>while</strong> it meets a specified condition.</li>
</ul>

<p>Most of the time, you only need to use <strong>repeat</strong> action to loop over the macros. The main advantage is that it allows you to decide how many times you want to run them and save yourself from dealing with the uncertainty of checking variables in Until and While actions.<sup id="fnref:20220701083325" role="doc-noteref"><a href="#fn:20220701083325" class="footnote" rel="footnote">1</a></sup></p>

<p>For example, sometimes, I need to get the SimilarWeb stats from the websites I found. I put these data in a spreadsheet and enter the number of times I want to repeat the macro that pulls the required information.</p>

<p>Here is the macro that shows you how it works.</p>

<p><img src="https://images.sayzlim.net/2022/07/keyboard-maestro-repeat-action.webp" alt="" title="Keyboard Maestro Repeat Action" /></p>

<p>Create an action that prompts input from you to enter the number of times you want to repeat a group of actions or a macro. Save to a variable called <code class="language-plaintext highlighter-rouge">LocalRepeatAmount</code>.</p>

<p>Create another action that repeats the actions based on the value of <code class="language-plaintext highlighter-rouge">LocalRepeatAmount</code>. The combination of repeat action and local variable lets you choose how many times you want to run the macro instead of going back into the editor to update the number of times to run the macro.</p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:20220701083325" role="doc-endnote">
      <p>These two actions are more suitable when you want to check the environment and screen conditions before you resume actions in a macro. <a href="#fnref:20220701083325" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Prioritize Health]]></title>
    <link href="https://sayzlim.net/prioritize-health/"/>
    <updated>2022-06-16T00:00:00+07:00</updated>
    <id>https://sayzlim.net/prioritize-health</id>
    <content type="html"><![CDATA[<p>In the last eight years, I’ve made a lot of decisions. There were some good and bad choices, but I always end up in a better situation if I follow this one rule.</p>

<p>Health comes first.</p>

<p>I am able to perform and think more effectively in both life and work when I make decisions that benefit my physical and mental health. I can sit without worrying about my back hurting. I can stay focused longer. I can think and analyze without feeling anxious.</p>

<p><a href="https://twitter.com/sayzlim/status/1535493652998500353">My goal</a> is to be a good parent to my children. I want to be there whenever they need me. I want to be able to carry them upstairs without hurting my knees. I want to provide for them until they are old enough to care for themselves.</p>

<p>Most people glorifying hustle culture fail to take care of their health. Even before I became a parent, I prioritized my health by <em>trying</em> to have a balanced diet and exercise regularly.</p>

<p>If you are given the option, <strong>always choose to be healthy.</strong></p>

<p>If there is one productivity tip I want to share with you, it is to keep yourself healthy so that you can do the work you’re proud of in the next two decades.</p>
]]></content>
  </entry>
  
</feed>
