<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Sayz Lim]]></title>
  <link href="https://sayzlim.net/atom.xml" rel="self"/>
  <link href="https://sayzlim.net/"/>
  <updated>2022-12-29T15:50:53+07:00</updated>
  <id>https://sayzlim.net/</id>
  <author>
    <name><![CDATA[Sayz Lim]]></name>
    <email><![CDATA[talk@sayzlim.net]]></email>
  </author>
  <generator uri="https://jekyllrb.com">Jekyll</generator>

  
  <entry>
    <title type="html"><![CDATA[Resolve Mackup Not Reading Preferences in macOS Monterey]]></title>
    <link href="https://sayzlim.net/mackup-syncing-monterey/"/>
    <updated>2022-12-29T00:00:00+07:00</updated>
    <id>https://sayzlim.net/mackup-syncing-monterey</id>
    <content type="html"><![CDATA[<p>You will notice that Mackup is no longer working if you sync your applications through Dropbox because the latest update has created another layer of security to take advantage of macOS Monterey privacy features.</p>

<p>The installed apps can’t read the preferences files because these files are located in a different Cloud Storage (for example, Dropbox)<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup> that requires additional permission if you want macOS to read these files.</p>

<p>You can resolve the permission issue by granting ``cfprefsd` with Full Disk Access.</p>

<p class="sidenote">It’s safe to grant permission to <code class="language-plaintext highlighter-rouge">cfprefsd</code> because it’s one of the tools used by the developers to read the macOS preferences files. You can <a href="https://discussions.apple.com/thread/4958344">read more about it here</a>.</p>

<p>You can locate the file by entering <code class="language-plaintext highlighter-rouge">which cfprefsd</code> in Terminal. By default, you can find the file at this path:</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/usr/sbin/cfprefsd
</code></pre></div></div>

<p>Open Security &amp; Privacy in the System Preferences and drag the <code class="language-plaintext highlighter-rouge">cfprefsd</code> into the <strong>Privacy =&gt; Full Disk Access</strong> tab. You can log out and login into your user account to see if this resolves the problem.</p>

<h2 id="custom-mackup-directory-path">Custom Mackup Directory Path</h2>
<p>If you still having problems with reading the preferences, you want to consider uninstalling Mackup and restoring the preferences files back to their original paths.</p>

<ol>
  <li>Backup the latest preferences by entering <code class="language-plaintext highlighter-rouge">mackup backup</code> into Terminal. Enter <code class="language-plaintext highlighter-rouge">Yes</code> for all the preferences you want to backup.</li>
  <li>Enter <code class="language-plaintext highlighter-rouge">mackup uninstall</code> to restore the preferences file back to the default paths.</li>
  <li>Create a new file called <code class="language-plaintext highlighter-rouge">.mackup.cfg</code> in the Home directory  and update with the following details. You can replace the value of <code class="language-plaintext highlighter-rouge">directory</code> with the directory name you use — the default directory name is Mackup.</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[storage]
engine = file_system
path = Library/CloudStorage/Dropbox
directory = Mackup
</code></pre></div></div>

<ol>
  <li>Enter <code class="language-plaintext highlighter-rouge">mackup backup</code> to create symlinks pointing to the paths you’ve configured above.</li>
</ol>

<h2 id="restoring-backup">Restoring Backup</h2>
<ol>
  <li>To restore your preferences files on other macOS, you want to make sure that you have updated to the latest Dropbox and let the files complete syncing first.</li>
  <li>Create a <code class="language-plaintext highlighter-rouge">.mackup.cfg</code> and enter the same details you had before.</li>
  <li>Ensure that <code class="language-plaintext highlighter-rouge">cfprefsd</code> has the permission to Full Disk Access.</li>
  <li>Enter <code class="language-plaintext highlighter-rouge">mackup restore</code> to restore the files from Dropbox backup.</li>
</ol>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>For full discussion regarding this topic, you can learn from <a href="https://github.com/lra/mackup/issues/1858">this discussion</a> in the official repository. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing Karabiner Elements Issue on macOS Monterey]]></title>
    <link href="https://sayzlim.net/karabiner-elements-monterey-not-working/"/>
    <updated>2022-12-02T00:00:00+07:00</updated>
    <id>https://sayzlim.net/karabiner-elements-monterey-not-working</id>
    <content type="html"><![CDATA[<p>Karabiner Elements stopped working after I updated Dropbox because it couldn’t pick up the configuration files that I synced through Mackup via Dropbox.</p>

<p>Dropbox is now fully supported on macOS Monterey by taking advantage of Apple’s File Provider APIs, which means you need to grant additional permission to Karabiner Elements binary files to access the configuration files.</p>

<p><img src="https://images.sayzlim.net/2022/12/karabiner-elements-full-disk-access.webp" alt="" title="System Preferences Full Disk Access" /></p>

<p>You can fix the issues by granting <code class="language-plaintext highlighter-rouge">karabiner_grabber</code> and <code class="language-plaintext highlighter-rouge">karabiner_obsserver</code> full disk access. You can find this setting under Security &amp; Privacy in System Preferences.</p>

<p>You can locate these two binary files by using Finder and pressing <code class="language-plaintext highlighter-rouge">Command-Shift-G</code>, then you can paste the following path to open the folder:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/Library/Application Support/org.pqrs/Karabiner-Elements/bin/
</code></pre></div></div>

<p>Move these two files into the Full Disk Access window and restart Karabiner Elements. If you follow the steps above, Karabiner Elements will start working again in macOS Monterey.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to add a theme selection feature with vanilla JavaScript]]></title>
    <link href="https://sayzlim.net/theme-selection-javascript/"/>
    <updated>2022-08-26T00:00:00+07:00</updated>
    <id>https://sayzlim.net/theme-selection-javascript</id>
    <content type="html"><![CDATA[<p>In the previous post, I explained how to automatically set a dark theme using a CSS media query to check site visitors’ device preferences. Next, I will show you how to let users select the site theme by writing a few JavaScript functions.</p>

<p>You can also <a href="https://codepen.io/sayzlim/pen/XWEVmRL" title="Theme Selection Demo on CodePen">check out the demo</a> if you wish to skip the whole guide to show you how it works.</p>

<p>If you have followed the guideline to set a dark theme before, you will notice that we’ve used a <code class="language-plaintext highlighter-rouge">:not()</code> pseudo class to apply the dark theme when the <code class="language-plaintext highlighter-rouge">:root</code> element doesn’t contain <code class="language-plaintext highlighter-rouge">data-site-theme</code> as the attribute.</p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@media</span> <span class="p">(</span><span class="n">prefers-color-scheme</span><span class="o">:</span> <span class="n">dark</span><span class="p">)</span> <span class="p">{</span>
	<span class="nd">:root:not</span><span class="o">([</span><span class="nt">data-site-theme</span><span class="o">])</span> <span class="p">{</span>
		<span class="na">--theme-color-background-400</span><span class="p">:</span> <span class="si">#{</span><span class="nv">$color-charcoal-400</span><span class="si">}</span><span class="p">;</span>
		<span class="na">--theme-color-background-500</span><span class="p">:</span> <span class="si">#{</span><span class="nv">$color-charcoal-300</span><span class="si">}</span><span class="p">;</span>
		<span class="c1">// The rest of the dark theme color tokens</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p class="sidenote">In HTML, <code class="language-plaintext highlighter-rouge">:root</code> represents the <code class="language-plaintext highlighter-rouge">&lt;html&gt;</code> element and is identical to the selector html, except that <strong>its specificity is higher</strong>.</p>

<p>Building a feature for site visitors to select the site theme  requires a few requirements:</p>
<ol>
  <li>We need a way to store the user option.</li>
  <li>We need to add some UI elements for users to choose their preferred themes.</li>
  <li>We need to update the CSS to support the selected theme.</li>
</ol>

<h2 id="creating-theme-manager-object">Creating Theme Manager Object</h2>
<p>One of my favorite design patterns is <strong>Command Pattern</strong>, where you can encapsulate actions as objects. For me, it’s the most straightforward design pattern to learn if you’re new to JavaScript because you’re only dealing with methods to manipulate DOM. For example, here is the complete snippet to create a theme manager that I use on my site.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">_manager</span> <span class="o">=</span> <span class="p">{</span>
	<span class="na">setTheme</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">userColorScheme</span><span class="p">)</span> <span class="p">{</span>
		<span class="nx">localStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">user-color-scheme</span><span class="dl">'</span><span class="p">,</span> <span class="nx">userColorScheme</span><span class="p">);</span>
		<span class="nb">document</span>
				<span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">html</span><span class="dl">'</span><span class="p">)</span>
				<span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="dl">'</span><span class="s1">data-site-theme</span><span class="dl">'</span><span class="p">,</span> <span class="nx">userColorScheme</span><span class="p">);</span>
	<span class="p">},</span>
	<span class="na">setUserTheme</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span>
			<span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">user-color-scheme</span><span class="dl">'</span><span class="p">)</span>
		<span class="p">)</span> <span class="p">{</span>
			<span class="kd">let</span> <span class="nx">userColorScheme</span> <span class="o">=</span> <span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">user-color-scheme</span><span class="dl">'</span><span class="p">);</span>
			<span class="k">this</span><span class="p">.</span><span class="nx">setTheme</span><span class="p">(</span><span class="nx">userColorScheme</span><span class="p">);</span>
		<span class="p">}</span>
	<span class="p">},</span>
	<span class="na">resetUserTheme</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
		<span class="nx">localStorage</span><span class="p">.</span><span class="nx">removeItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">user-color-scheme</span><span class="dl">'</span><span class="p">);</span>
		<span class="nb">document</span>
				<span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">html</span><span class="dl">'</span><span class="p">)</span>
				<span class="p">.</span><span class="nx">removeAttribute</span><span class="p">(</span><span class="dl">'</span><span class="s1">data-site-theme</span><span class="dl">'</span><span class="p">);</span>
	<span class="p">},</span>
	<span class="na">init</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">setUserTheme</span><span class="p">();</span>
	<span class="p">},</span>
<span class="p">};</span>

<span class="nx">_manager</span><span class="p">.</span><span class="nx">init</span><span class="p">();</span>
</code></pre></div></div>

<p>Let’s take a look at each method and its purpose.</p>

<h3 id="settheme">setTheme</h3>
<p><code class="language-plaintext highlighter-rouge">setTheme</code> is the method to set the site theme. Using the built-in <code class="language-plaintext highlighter-rouge">localStorage</code> property, you create a local item called <code class="language-plaintext highlighter-rouge">user-color-scheme</code> with the value you pass into the method. You then use <code class="language-plaintext highlighter-rouge">querySelector</code> to apply the value to <code class="language-plaintext highlighter-rouge">data-site-theme</code> attribute. Here is an example of an updated html data attribute when you run <code class="language-plaintext highlighter-rouge">_manager.setTheme('dark')</code>.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span> <span class="na">data-site-theme=</span><span class="s">"dark"</span><span class="nt">&gt;</span>
</code></pre></div></div>

<p class="sidenote"><strong>Checking Local Storage</strong> — You can check the local storage value using Chrome Dev Tools and navigate to the Application tab. If you’re using Safari, you can check the Storage tab.</p>

<h3 id="setusertheme">setUserTheme</h3>
<p>The method’s purpose is to apply a user theme if we detect any values in the local storage. First, we check if there is any value by using <code class="language-plaintext highlighter-rouge">localStorage.getItem('user-color-scheme')</code> function. If we detect a value, we will apply them by calling the <code class="language-plaintext highlighter-rouge">setTheme</code> method we built earlier.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">setUserTheme</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span>
		<span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">user-color-scheme</span><span class="dl">'</span><span class="p">)</span>
	<span class="p">)</span> <span class="p">{</span>
		<span class="kd">let</span> <span class="nx">userColorScheme</span> <span class="o">=</span> <span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">user-color-scheme</span><span class="dl">'</span><span class="p">);</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">setTheme</span><span class="p">(</span><span class="nx">userColorScheme</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="resetusertheme">resetUserTheme</h3>
<p>Although it’s nice to allow site visitors to choose their theme, we also need to offer a way for them to reset their choice for the site to match their device’s theme setting. This method will remove <code class="language-plaintext highlighter-rouge">user-color-scheme</code> item from the local storage and remove the <code class="language-plaintext highlighter-rouge">data-site-theme</code> attribute from the document.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">resetUserTheme</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">localStorage</span><span class="p">.</span><span class="nx">removeItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">user-color-scheme</span><span class="dl">'</span><span class="p">);</span>
	<span class="nb">document</span>
			<span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">html</span><span class="dl">'</span><span class="p">)</span>
			<span class="p">.</span><span class="nx">removeAttribute</span><span class="p">(</span><span class="dl">'</span><span class="s1">data-site-theme</span><span class="dl">'</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="buttons-for-theme-selection">Buttons for Theme Selection</h2>
<p>With the theme manager ready to use, we can pass the methods into <code class="language-plaintext highlighter-rouge">onclick</code> event to set the user theme. You can wrap the SVG icon with the <code class="language-plaintext highlighter-rouge">button</code> element if you plan to use icons. Make sure to add <code class="language-plaintext highlighter-rouge">aria-label</code> attribute so the screen reader can read the button description.</p>

<p>Here is the structure of the buttons. Replace <code class="language-plaintext highlighter-rouge">SVG Icon</code> with the actual SVG value you can copy from free SVG icons sites like <a href="https://feathericons.com/">Feather Icons</a>.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;aside</span> <span class="na">class=</span><span class="s">"select-theme"</span><span class="nt">&gt;</span>
	<span class="nt">&lt;button</span>
		<span class="na">onclick=</span><span class="s">"_manager.resetUserTheme()"</span>
		<span class="na">aria-label=</span><span class="s">"Enable System Theme"</span>
	<span class="nt">&gt;</span>
		SVG Icon
	<span class="nt">&lt;/button&gt;</span>
	<span class="nt">&lt;button</span>
		<span class="na">onclick=</span><span class="s">"_manager.setTheme('light')"</span>
		<span class="na">aria-label=</span><span class="s">"Enable Light Theme"</span>
	<span class="nt">&gt;</span>
		SVG Icon
	<span class="nt">&lt;/button&gt;</span>
	<span class="nt">&lt;button</span>
		<span class="na">onclick=</span><span class="s">"_manager.setTheme('dark')"</span>
		<span class="na">aria-label=</span><span class="s">"Enable Dark Theme"</span>
	<span class="nt">&gt;</span>
		SVG Icon
	<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;/aside&gt;</span>
</code></pre></div></div>

<p>Following the guide above, you should have functional buttons that allow you to update your site theme. I didn’t cover how to style the buttons because it’s beyond the scope of this guide. I only want to show you how I put the structure together by taking inspiration from other sites.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to add dark theme with Sass and CSS variables]]></title>
    <link href="https://sayzlim.net/dark-theme-css-sass/"/>
    <updated>2022-08-15T00:00:00+07:00</updated>
    <id>https://sayzlim.net/dark-theme-css-sass</id>
    <content type="html"><![CDATA[<p>A few weeks ago, I added an option to toggle between dark and light themes to this blog. After exploring some options, I decide to store the color tokens with Sass and assign them to CSS variables.</p>

<h2 id="setting-up-design-tokens">Setting Up Design Tokens</h2>
<p>Design tokens are values you use for your design system. It serves as a guideline to keep your brand overall feel consistent.</p>

<p>If you’ve been hardcoding the color values in the CSS, you want to set those colors with CSS variables so you can reuse them in  your CSS file.</p>

<p>For a personal project where you’re the sole author, the design token name formats are flexible as long they make sense to you. I usually choose a few base colors and play around with the opacity value.</p>

<p class="sidenote"><strong>Color Picking Tips</strong> — You can adjust the lightness in the LCH value if you want something lighter or darker. You can use a tool like <a href="https://css.land/lch/">LCH Colour picker</a> to adjust the LCH values.</p>

<p>I store those design tokens as the Sass variables so they’re not exposed in the stylesheet.</p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Dark Colors</span>
<span class="nv">$color-orange-400</span><span class="p">:</span> <span class="nf">hsl</span><span class="p">(</span><span class="m">27</span><span class="o">,</span> <span class="m">100%</span><span class="o">,</span> <span class="m">79%</span><span class="p">);</span>
<span class="nv">$color-orange-400-10</span><span class="p">:</span> <span class="nf">hsla</span><span class="p">(</span><span class="m">27</span><span class="o">,</span> <span class="m">100%</span><span class="o">,</span> <span class="m">79%</span><span class="o">,</span> <span class="mi">.1</span><span class="p">);</span>
<span class="nv">$color-orange-400-50</span><span class="p">:</span> <span class="nf">hsla</span><span class="p">(</span><span class="m">27</span><span class="o">,</span> <span class="m">100%</span><span class="o">,</span> <span class="m">79%</span><span class="o">,</span> <span class="mi">.5</span><span class="p">);</span>
<span class="nv">$color-charcoal-400</span><span class="p">:</span> <span class="nf">hsl</span><span class="p">(</span><span class="m">0</span><span class="o">,</span> <span class="m">0%</span><span class="o">,</span> <span class="m">2%</span><span class="p">);</span>
<span class="nv">$color-charcoal-400-10</span><span class="p">:</span> <span class="nf">hsla</span><span class="p">(</span><span class="m">0</span><span class="o">,</span> <span class="m">0%</span><span class="o">,</span> <span class="m">2%</span><span class="o">,</span> <span class="mi">.1</span><span class="p">);</span>
<span class="nv">$color-charcoal-300</span><span class="p">:</span> <span class="nf">hsl</span><span class="p">(</span><span class="m">0</span><span class="o">,</span> <span class="m">0%</span><span class="o">,</span> <span class="m">11%</span><span class="p">);</span>
<span class="nv">$color-green-400</span><span class="p">:</span> <span class="nf">hsl</span><span class="p">(</span><span class="m">105</span><span class="o">,</span> <span class="m">100%</span><span class="o">,</span> <span class="m">75%</span><span class="p">);</span>
<span class="nv">$color-green-400-10</span><span class="p">:</span> <span class="nf">hsla</span><span class="p">(</span><span class="m">109</span><span class="o">,</span> <span class="m">100%</span><span class="o">,</span> <span class="m">77%</span><span class="o">,</span> <span class="mi">.1</span><span class="p">);</span>
<span class="nv">$color-dirtwhite-400</span><span class="p">:</span> <span class="nf">hsl</span><span class="p">(</span><span class="m">60</span><span class="o">,</span> <span class="m">36%</span><span class="o">,</span> <span class="m">96%</span><span class="p">);</span>
<span class="nv">$color-dirtwhite-400-30</span><span class="p">:</span> <span class="nf">hsla</span><span class="p">(</span><span class="m">60</span><span class="o">,</span> <span class="m">36%</span><span class="o">,</span> <span class="m">96%</span><span class="o">,</span> <span class="mi">.3</span><span class="p">);</span>

<span class="c1">// Light Colors</span>
<span class="nv">$color-linen-400</span><span class="p">:</span> <span class="nf">hsl</span><span class="p">(</span><span class="m">30</span><span class="o">,</span> <span class="m">58%</span><span class="o">,</span> <span class="m">93%</span><span class="p">);</span>
<span class="nv">$color-linen-500</span><span class="p">:</span> <span class="nf">hsl</span><span class="p">(</span><span class="m">33</span><span class="o">,</span> <span class="m">45%</span><span class="o">,</span> <span class="m">87%</span><span class="p">);</span>
<span class="nv">$color-linen-500-10</span><span class="p">:</span> <span class="nf">hsla</span><span class="p">(</span><span class="m">33</span><span class="o">,</span> <span class="m">45%</span><span class="o">,</span> <span class="m">87%</span><span class="o">,</span> <span class="mi">.1</span><span class="p">);</span>
<span class="nv">$color-oil-400</span><span class="p">:</span> <span class="nf">hsl</span><span class="p">(</span><span class="m">32</span><span class="o">,</span> <span class="m">29%</span><span class="o">,</span> <span class="m">10%</span><span class="p">);</span>
<span class="nv">$color-oil-400-30</span><span class="p">:</span> <span class="nf">hsla</span><span class="p">(</span><span class="m">32</span><span class="o">,</span> <span class="m">29%</span><span class="o">,</span> <span class="m">10%</span><span class="o">,</span> <span class="mi">.3</span><span class="p">);</span>
<span class="nv">$color-darkpurple-400</span><span class="p">:</span> <span class="nf">hsl</span><span class="p">(</span><span class="m">266</span><span class="o">,</span> <span class="m">45%</span><span class="o">,</span> <span class="m">59%</span><span class="p">);</span>
<span class="nv">$color-darkpurple-400-10</span><span class="p">:</span> <span class="nf">hsla</span><span class="p">(</span><span class="m">266</span><span class="o">,</span> <span class="m">45%</span><span class="o">,</span> <span class="m">59%</span><span class="o">,</span> <span class="mi">.1</span><span class="p">);</span>
<span class="nv">$color-darkpurple-400-50</span><span class="p">:</span> <span class="nf">hsla</span><span class="p">(</span><span class="m">266</span><span class="o">,</span> <span class="m">45%</span><span class="o">,</span> <span class="m">59%</span><span class="o">,</span> <span class="mi">.5</span><span class="p">);</span>
<span class="nv">$color-rose-400</span><span class="p">:</span> <span class="nf">hsl</span><span class="p">(</span><span class="m">353</span><span class="o">,</span> <span class="m">54%</span><span class="o">,</span> <span class="m">55%</span><span class="p">);</span>
<span class="nv">$color-rose-400-10</span><span class="p">:</span> <span class="nf">hsla</span><span class="p">(</span><span class="m">353</span><span class="o">,</span> <span class="m">54%</span><span class="o">,</span> <span class="m">55%</span><span class="o">,</span> <span class="mi">.1</span><span class="p">);</span>
</code></pre></div></div>

<h2 id="set-default-theme">Set Default Theme</h2>
<p>With color variables ready, you can set the default theme color in <code class="language-plaintext highlighter-rouge">:root</code> by assigning them to your design tokens as CSS variables. You can have fewer or more variables depending on how you style your site. The idea is to start with some simple tokens like background, accent, and text color. I used to have a dark theme as the default, but I decided to set the light theme as the default.</p>

<p class="sidenote">You can’t assign Sass variable directly to CSS variable. You have to <a href="https://sass-lang.com/documentation/interpolation">interpolate the variable</a> with <code class="language-plaintext highlighter-rouge">#{}</code> to make it work with CSS built-in variables.</p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">:root</span> <span class="p">{</span>
	<span class="na">--theme-color-background-400</span><span class="p">:</span> <span class="si">#{</span><span class="nv">$color-linen-400</span><span class="si">}</span><span class="p">;</span>
	<span class="na">--theme-color-background-500</span><span class="p">:</span> <span class="si">#{</span><span class="nv">$color-linen-500</span><span class="si">}</span><span class="p">;</span>
	<span class="na">--theme-color-background-500-10</span><span class="p">:</span> <span class="si">#{</span><span class="nv">$color-linen-500-10</span><span class="si">}</span><span class="p">;</span>
	<span class="na">--theme-color-accent-400</span><span class="p">:</span> <span class="si">#{</span><span class="nv">$color-darkpurple-400</span><span class="si">}</span><span class="p">;</span>
	<span class="na">--theme-color-accent-400-10</span><span class="p">:</span> <span class="si">#{</span><span class="nv">$color-darkpurple-400-10</span><span class="si">}</span><span class="p">;</span>
	<span class="na">--theme-color-accent-400-50</span><span class="p">:</span> <span class="si">#{</span><span class="nv">$color-darkpurple-400-50</span><span class="si">}</span><span class="p">;</span>
	<span class="na">--theme-color-foreground-400</span><span class="p">:</span> <span class="si">#{</span><span class="nv">$color-rose-400</span><span class="si">}</span><span class="p">;</span>
	<span class="na">--theme-color-foreground-400-10</span><span class="p">:</span> <span class="si">#{</span><span class="nv">$color-rose-400-10</span><span class="si">}</span><span class="p">;</span>
	<span class="na">--theme-color-text</span><span class="p">:</span> <span class="si">#{</span><span class="nv">$color-oil-400</span><span class="si">}</span><span class="p">;</span>
	<span class="na">--theme-color-shadow</span><span class="p">:</span> <span class="si">#{</span><span class="nv">$color-oil-400-30</span><span class="si">}</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>You’re going to replace the colors in your CSS files with those variables. If you’ve been passing the Sass color values directly, you want to take advantage of CSS variables. Instead of writing <code class="language-plaintext highlighter-rouge">color: $theme-color-text</code>, you can write it like this:</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">body</span> <span class="p">{</span>
	<span class="nl">color</span><span class="p">:</span> <span class="n">var</span><span class="p">(</span><span class="n">--theme-color-text</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="adding-dark-theme-support">Adding Dark Theme Support</h2>
<p>It’s straightforward to add dark theme support. I’m borrowing this <a href="https://ethanmarcotte.com/wrote/update-in/">technique Ethan Marcotte’s recent update</a>.</p>

<p>We want to assign a different color to the design tokens by using @media query to check the user device preferences. We’re will apply the dark color values when the <code class="language-plaintext highlighter-rouge">:root</code> or <code class="language-plaintext highlighter-rouge">html</code> document doesn’t have <code class="language-plaintext highlighter-rouge">data-site-theme</code> as the attribute.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@media</span> <span class="p">(</span><span class="n">prefers-color-scheme</span><span class="o">:</span> <span class="n">dark</span><span class="p">)</span> <span class="p">{</span>
	<span class="nd">:root:not</span><span class="o">([</span><span class="nt">data-site-theme</span><span class="o">])</span> <span class="p">{</span>
		<span class="na">--theme-color-background-400</span><span class="p">:</span> <span class="si">#{</span><span class="nv">$color-charcoal-400</span><span class="si">}</span><span class="p">;</span>
		<span class="na">--theme-color-background-500</span><span class="p">:</span> <span class="si">#{</span><span class="nv">$color-charcoal-300</span><span class="si">}</span><span class="p">;</span>
		<span class="na">--theme-color-background-500-10</span><span class="p">:</span> <span class="si">#{</span><span class="nv">$color-charcoal-400-10</span><span class="si">}</span><span class="p">;</span>
		<span class="na">--theme-color-accent-400</span><span class="p">:</span> <span class="si">#{</span><span class="nv">$color-orange-400</span><span class="si">}</span><span class="p">;</span>
		<span class="na">--theme-color-accent-400-10</span><span class="p">:</span> <span class="si">#{</span><span class="nv">$color-orange-400-10</span><span class="si">}</span><span class="p">;</span>
		<span class="na">--theme-color-accent-400-50</span><span class="p">:</span> <span class="si">#{</span><span class="nv">$color-orange-400-50</span><span class="si">}</span><span class="p">;</span>
		<span class="na">--theme-color-foreground-400</span><span class="p">:</span> <span class="si">#{</span><span class="nv">$color-green-400</span><span class="si">}</span><span class="p">;</span>
		<span class="na">--theme-color-foreground-400-10</span><span class="p">:</span> <span class="si">#{</span><span class="nv">$color-green-400-10</span><span class="si">}</span><span class="p">;</span>
		<span class="na">--theme-color-text</span><span class="p">:</span> <span class="si">#{</span><span class="nv">$color-dirtwhite-400</span><span class="si">}</span><span class="p">;</span>
		<span class="na">--theme-color-shadow</span><span class="p">:</span> <span class="si">#{</span><span class="nv">$color-dirtwhite-400-30</span><span class="si">}</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>You can check if your site theme is working by emulating the dark theme with Chrome Dev Tools by pressing <code class="language-plaintext highlighter-rouge">Command-Shift-P</code> and search for “emulate dark” for the command to emulate dark theme.</p>

<p>It’s not enough to automatically support dark theme. The next thing you want to do is to allow readers to choose the theme they want to keep when they visit your site. I will cover this topic in a separate post.</p>
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>The custom <code class="language-plaintext highlighter-rouge">data-site-theme</code> attribute will be useful when we want to build a feature to allow users to select a specific theme. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reading CSV as JSON with Alfred Script Filter]]></title>
    <link href="https://sayzlim.net/alfred-script-filter-read-csv/"/>
    <updated>2022-08-10T00:00:00+07:00</updated>
    <id>https://sayzlim.net/alfred-script-filter-read-csv</id>
    <content type="html"><![CDATA[<p>I write this guide for people who want to learn how to set up Alfred with Script Filter as the input. It’s perfectly fine if you’re not familiar with any scripting languages. The guide will show you how to convert CSV files into JSON objects that can populate Alfred search results.</p>

<h2 id="pick-a-scripting-language">Pick a Scripting Language</h2>
<p>You can write the script in any language you’re comfortable with and run it through a Unix shell. For this tutorial, we’re going to use Python 3. The easiest way to install Python is through a package manager like Homebrew. You can <a href="https://docs.python-guide.org/starting/install3/osx/">refer to this guide to install Python on macOS</a>.</p>

<h2 id="workflow-setup">Workflow Setup</h2>
<p>Create a blank workflow and add Script Filter input with keywords to trigger the workflow. Write this down in the script input field.</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 main.py
</code></pre></div></div>

<p><img src="https://images.sayzlim.net/2022/08/alfred-script-filter-reveal-workflow.webp" alt="" title="Reveal Alfred Workflow Folder" /></p>

<p>Click on the folder icon as seen from the screenshot above to reveal the workflow directory. Create a new Python file in the workflow folder and name it <code class="language-plaintext highlighter-rouge">main.py</code>. The main process will be written in this script.</p>

<p>There are two things we want to achieve in this script:</p>
<ol>
  <li>The workflow must be able to read the file with a relative path using tilde so any user can use it.</li>
  <li>The workflow must be able to convert the CSV into JSON for Alfred to filter the results.</li>
</ol>

<p>Here is the <code class="language-plaintext highlighter-rouge">sample.csv</code> content that we’ll be using for this tutorial. You can store it on the desktop.</p>

<p><a href="https://s3.sayzlim.net/f/sample.csv">Download CSV</a></p>

<h2 id="python-script">Python Script</h2>
<p>Here is a Python script to read a CSV file from your selected source on your machine. I’m going to break down each part of the code, so they make sense, and you can modify it to match your workflow.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">os.path</span>
<span class="kn">import</span> <span class="nn">json</span>
<span class="kn">import</span> <span class="nn">csv</span>

<span class="n">csv_file_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">expanduser</span><span class="p">(</span><span class="s">"~/Desktop/sample.csv"</span><span class="p">)</span>

<span class="n">result</span> <span class="o">=</span> <span class="p">{</span>
	<span class="s">"items"</span><span class="p">:</span> <span class="p">[]</span>
<span class="p">}</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">csv_file_path</span><span class="p">)</span> <span class="k">as</span> <span class="n">csv_file</span><span class="p">:</span>
	<span class="n">csv_reader</span> <span class="o">=</span> <span class="n">csv</span><span class="p">.</span><span class="n">DictReader</span><span class="p">(</span><span class="n">csv_file</span><span class="p">)</span>
	<span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">csv_reader</span><span class="p">:</span>
		<span class="n">row_item</span> <span class="o">=</span> <span class="p">{</span>
			<span class="s">"uid"</span><span class="p">:</span> <span class="n">row</span><span class="p">[</span><span class="s">'title'</span><span class="p">],</span>
			<span class="s">"title"</span><span class="p">:</span> <span class="n">row</span><span class="p">[</span><span class="s">"title"</span><span class="p">],</span>
			<span class="s">"subtitle"</span><span class="p">:</span> <span class="n">row</span><span class="p">[</span><span class="s">"subtitle"</span><span class="p">],</span>
			<span class="s">"match"</span> <span class="p">:</span> <span class="n">row</span><span class="p">[</span><span class="s">"title"</span><span class="p">]</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">row</span><span class="p">[</span><span class="s">"platform"</span><span class="p">],</span>
			<span class="s">"arg"</span><span class="p">:</span> <span class="n">row</span><span class="p">[</span><span class="s">"title"</span><span class="p">],</span>
			<span class="s">"text"</span><span class="p">:</span> <span class="p">{</span>
					<span class="s">"copy"</span><span class="p">:</span> <span class="n">row</span><span class="p">[</span><span class="s">"price"</span><span class="p">]</span>
				<span class="p">}</span>
			<span class="p">}</span>
		<span class="n">result</span><span class="p">[</span><span class="s">"items"</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="n">row_item</span><span class="p">)</span>

<span class="n">output</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">output</span><span class="p">)</span>
</code></pre></div></div>

<p>First, we must import the modules we need to process the JSON and CSV files. These modules allow us to run the functions, read CSV files and convert them into JSON. We also want to expand the tilde using the <code class="language-plaintext highlighter-rouge">os.path.expanduser</code> function so this script can work for all users.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">os.path</span>
<span class="kn">import</span> <span class="nn">json</span>
<span class="kn">import</span> <span class="nn">csv</span>

<span class="n">csv_file_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">expanduser</span><span class="p">(</span><span class="s">"~/Desktop/sample.csv"</span><span class="p">)</span>
</code></pre></div></div>

<p>Alfred accepts JSON as the output of the script. The result must be stored inside the <code class="language-plaintext highlighter-rouge">items</code> key for Alfred to show them when you search for it. The following script declares a <code class="language-plaintext highlighter-rouge">result</code> dictionary variable with <code class="language-plaintext highlighter-rouge">items</code> as an array.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">result</span> <span class="o">=</span> <span class="p">{</span>
	<span class="s">"items"</span><span class="p">:</span> <span class="p">[]</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Now we want to populate the <code class="language-plaintext highlighter-rouge">items</code> key with the row item from the <code class="language-plaintext highlighter-rouge">csv_file_path</code>. The most important part is the value you assign for each key in the <code class="language-plaintext highlighter-rouge">row_item</code>. You can learn more about <a href="https://www.alfredapp.com/help/workflows/inputs/script-filter/json/">Script Filter JSON Format</a>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">csv_file_path</span><span class="p">)</span> <span class="k">as</span> <span class="n">csv_file</span><span class="p">:</span>
	<span class="n">csv_reader</span> <span class="o">=</span> <span class="n">csv</span><span class="p">.</span><span class="n">DictReader</span><span class="p">(</span><span class="n">csv_file</span><span class="p">)</span>
	<span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">csv_reader</span><span class="p">:</span>
		<span class="n">row_item</span> <span class="o">=</span> <span class="p">{</span>
			<span class="s">"uid"</span><span class="p">:</span> <span class="n">row</span><span class="p">[</span><span class="s">'title'</span><span class="p">],</span>
			<span class="s">"title"</span><span class="p">:</span> <span class="n">row</span><span class="p">[</span><span class="s">"title"</span><span class="p">],</span>
			<span class="s">"subtitle"</span><span class="p">:</span> <span class="n">row</span><span class="p">[</span><span class="s">"subtitle"</span><span class="p">],</span>
			<span class="s">"match"</span> <span class="p">:</span> <span class="n">row</span><span class="p">[</span><span class="s">"title"</span><span class="p">]</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">row</span><span class="p">[</span><span class="s">"platform"</span><span class="p">],</span>
			<span class="s">"arg"</span><span class="p">:</span> <span class="n">row</span><span class="p">[</span><span class="s">"title"</span><span class="p">],</span>
			<span class="s">"text"</span><span class="p">:</span> <span class="p">{</span>
					<span class="s">"copy"</span><span class="p">:</span> <span class="n">row</span><span class="p">[</span><span class="s">"price"</span><span class="p">]</span>
				<span class="p">}</span>
			<span class="p">}</span>
		<span class="n">result</span><span class="p">[</span><span class="s">"items"</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="n">row_item</span><span class="p">)</span>
</code></pre></div></div>

<p>The advantage of using Script Filter is that we can tell Alfred which value to use for the workflow. Here are some things that you want to consider modifying:</p>

<ul>
  <li>Define the value that you want to pass in <code class="language-plaintext highlighter-rouge">arg</code>.</li>
  <li>Pass multiple values into the <code class="language-plaintext highlighter-rouge">match</code> key to expand what Alfred can search. In the following example, we combine row title and platform values.</li>
  <li>Define the text result you receive from copying <code class="language-plaintext highlighter-rouge">Command-C</code> and displaying large type with <code class="language-plaintext highlighter-rouge">Command-L</code> in the <code class="language-plaintext highlighter-rouge">text</code> key.</li>
</ul>

<p>Once the items are populated, you can convert them into JSON using <code class="language-plaintext highlighter-rouge">json.dumps(result)</code> and print the result for Alfred to pick up.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">output</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">output</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="example-use-case">Example Use Case</h2>

<p><img src="https://images.sayzlim.net/2022/08/alfred-script-filter-workflow.webp" alt="" title="Alfred Script Filter Result" /></p>

<p>Once you have the Script Filter input configured, you can chain them with actions based on the argument you’ve defined. For example, I have a CSV file containing the list of sites in the ad network. I can pass the site ID as the argument and open the dashboard URL to check the site performance.</p>

<p>If you use CRM like HubSpot, you can also export the list of customers you manage and store them on your machine. Instead of using HubSpot search, you can filter the result right from Alfred. You can be creative with the modifiers:</p>
<ul>
  <li>Create an action to accept customer ID to take you to the HubSpot contact page.</li>
  <li>Set the <code class="language-plaintext highlighter-rouge">text</code> key to the contact email address so you can copy it from the search result.</li>
  <li>Display the company name as the subtitle of the search result.</li>
</ul>

<p>The advantage of Script Filter input is the flexibility to modify the value of the search result. It’s possible to build a fancier workflow with API, however, I see that processing CSV as the most practical use case for most people.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to sort CSS properties with Prettier in Sublime Text]]></title>
    <link href="https://sayzlim.net/sort-css-prettier-sublime-text/"/>
    <updated>2022-08-06T00:00:00+07:00</updated>
    <id>https://sayzlim.net/sort-css-prettier-sublime-text</id>
    <content type="html"><![CDATA[<p>I’ve been searching for a replacement for CSScomb because it is no longer actively being maintained. It turns out Prettier can also accomplish the same work by combining it with PostCSS.</p>

<p>We’ll be using <a href="https://prettier.io/" title="Prettier · Opinionated Code Formatter">Prettier</a> as the code formatter. I’m going to assume that you’re not familiar with configuring Sublime Text packages, and I will provide all the details you need to get this setup working.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<ol id="markdown-toc">
  <li><a href="#getting-started" id="markdown-toc-getting-started">Getting Started</a>    <ol>
      <li><a href="#nodejs" id="markdown-toc-nodejs">Node.js</a></li>
      <li><a href="#required-node-packages" id="markdown-toc-required-node-packages">Required Node Packages</a></li>
      <li><a href="#jsprettier-sublime-package" id="markdown-toc-jsprettier-sublime-package">JsPrettier Sublime Package</a></li>
    </ol>
  </li>
  <li><a href="#sublime-text-settings" id="markdown-toc-sublime-text-settings">Sublime Text Settings</a>    <ol>
      <li><a href="#jsprettier-settings" id="markdown-toc-jsprettier-settings">JsPrettier Settings</a></li>
      <li><a href="#additional-prettier-cli-arguments" id="markdown-toc-additional-prettier-cli-arguments">Additional Prettier CLI Arguments</a></li>
    </ol>
  </li>
</ol>

<h2 id="getting-started">Getting Started</h2>
<p>Sublime Text is just a text editor. Unlike Visual Studio Code which is built with Electron, it doesn’t support Node.js by default. <em>Therefore, most installed packages will not work out of the box.</em> Sometimes you have to install the dependencies on your local machine before you can run them.</p>

<h3 id="nodejs">Node.js</h3>
<p>The best way to install <a href="https://nodejs.org/en/">Node.js</a> is using Node version manager so you can update and switch between versions easily. I’ve written a <a href="/setup-macos-web-development/">comprehensive guide to set up your development environment for macOS</a> if you wish to learn more about it.</p>

<h3 id="required-node-packages">Required Node Packages</h3>
<p>You need these three packages to format and sort the CSS in the file.</p>
<ul>
  <li>prettier</li>
  <li>postcss</li>
  <li>prettier-plugin-css-order</li>
</ul>

<p>You want to install them globally on your machine because it’s not dependent on any projects.<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup> Run the following commands to install them all at once.</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">--global</span> prettier postcss prettier-plugin-css-order
</code></pre></div></div>

<p>To confirm that they are installed correctly, you can run this command to list the installed global packages.</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm list <span class="nt">-g</span> <span class="nt">--depth</span> 0
</code></pre></div></div>

<h3 id="jsprettier-sublime-package">JsPrettier Sublime Package</h3>

<p><img src="https://images.sayzlim.net/2022/08/jsprettier-install.webp" alt="" title="Install JsPrettier with Package Control" /></p>

<p>Install <a href="https://packagecontrol.io/packages/JsPrettier" title="JsPrettier - Packages - Package Control">JsPrettier Sublime Package</a>. They provide several methods to install the package, but I recommend using <a href="https://packagecontrol.io/" title="Package Control - the Sublime Text package manager">Package Control</a> to manage your Sublime Text packages. It’s a package manager that makes it easy to install, remove, and update your installed Sublime packages.</p>

<h2 id="sublime-text-settings">Sublime Text Settings</h2>

<h3 id="jsprettier-settings">JsPrettier Settings</h3>
<p>JsPrettier doesn’t work out of the box after you’ve installed it. You still have to configure the <code class="language-plaintext highlighter-rouge">prettier_cli_path</code> and <code class="language-plaintext highlighter-rouge">node_path</code> to tell Sublime Text to run the command to process your CSS files.</p>

<p>You can access the package setting by pressing <kbd>Command-Shift-P</kbd> to call the Command Palette then type <code class="language-plaintext highlighter-rouge">jsprettier settings - side-by-side</code> to open the default and user settings side by side.</p>

<p><img src="https://images.sayzlim.net/2022/08/jsprettier-side-by-side.webp" alt="" title="JsPrettier Side by Side Settings in Sublime Text" /></p>

<p>To customize JsPrettier package, you need to override the default settings by passing the value into the associated key. For example, here is how you want to set up the paths if you have installed Node.js with N as the version manager:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"prettier_cli_path"</span><span class="p">:</span><span class="w"> </span><span class="s2">"~/.n/bin/prettier"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"node_path"</span><span class="p">:</span><span class="w"> </span><span class="s2">"~/.n/bin/node"</span><span class="p">,</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p class="sidenote"><strong>Where can I find the package paths?</strong> If you’re uncertain about the path of <code class="language-plaintext highlighter-rouge">prettier</code> and <code class="language-plaintext highlighter-rouge">node</code>, you can type <code class="language-plaintext highlighter-rouge">which prettier node</code> in Terminal to print their paths.</p>

<h3 id="additional-prettier-cli-arguments">Additional Prettier CLI Arguments</h3>
<p>You should be able to use JsPrettier package in Sublime Text now, but it still doesn’t sort the CSS properties. The main feature of <code class="language-plaintext highlighter-rouge">prettier-plugin-css-order</code> is to add two configurable keys to Prettier:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">order</code> defaults to <code class="language-plaintext highlighter-rouge">concentric-css</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">keepOverrides</code> defaults to <code class="language-plaintext highlighter-rouge">true</code>, for a new codebase <code class="language-plaintext highlighter-rouge">false</code> is recommended.</li>
</ul>

<p>We want to tell Prettier to always sort the CSS by passing <code class="language-plaintext highlighter-rouge">order</code> as the additional argument. It’s based on <a href="https://github.com/Siilwyn/css-declaration-sorter/">css-declaration-sorter</a>. You can set the order to either <code class="language-plaintext highlighter-rouge">alphabetical</code>, <code class="language-plaintext highlighter-rouge">smacss</code>, or <code class="language-plaintext highlighter-rouge">concentric-css</code></p>

<p>Here is what the user settings look like after passing the <code class="language-plaintext highlighter-rouge">--order</code> value.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"prettier_cli_path"</span><span class="p">:</span><span class="w"> </span><span class="s2">"~/.n/bin/prettier"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"node_path"</span><span class="p">:</span><span class="w"> </span><span class="s2">"~/.n/bin/node"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"additional_cli_args"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"--order"</span><span class="p">:</span><span class="w"> </span><span class="s2">"smacss"</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Save the JsPrettier user settings and run Prettier to confirm it’s working. There is an option to format code on save by setting <code class="language-plaintext highlighter-rouge">auto_format_on_save</code> to <code class="language-plaintext highlighter-rouge">true</code>, but I prefer to sort the CSS manually by searching for <code class="language-plaintext highlighter-rouge">JSPrettier: Format Code</code> with the command palette.</p>

<p>If you have any questions about this guide, you can send me a DM on Twitter.</p>
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>Sublime Text is my favorite text editor because it’s lightweight and fast. However, it can be challenging to configure installed packages without understanding how preferences are stored in Sublime Text. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>I write a small amount of CSS daily to help publishers fix their ad format issues. If you use the package only on your machine, you can install them as a global package. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to create a robust and reliable Keyboard Maestro macro]]></title>
    <link href="https://sayzlim.net/keyboard-maestro-macro-tips/"/>
    <updated>2022-08-04T00:00:00+07:00</updated>
    <id>https://sayzlim.net/keyboard-maestro-macro-tips</id>
    <content type="html"><![CDATA[<p>Building a reliable macro can be challenging if you have to run a series of sub-macros together. I’ve written my fair share of macros and put together a series of tips to help you efficiently build and debug a macro.</p>

<h2 id="setup-the-macro-default-state">Setup The Macro Default State</h2>
<p>You want to <strong>set a consistent default state</strong> if you’re building a macro that involves a series of sub-macros. Setting a default state is like moving the chess pieces to the starting position after you’ve finished the game.</p>

<p>Setting a default state is essential if the macro you build needs to deal with multiple application windows running in full screen.</p>

<p><img src="https://images.sayzlim.net/2022/08/keyboard-maestro-default-state.webp" alt="" title="Keyboard Maestro Macro Default State" /></p>

<p>Here is an example.</p>

<p>You want to set up a workspace that involves creating and resizing multiple Safari windows on a different screen. The default state will be a Safari application with all the windows closed. The macro will start by pressing <code class="language-plaintext highlighter-rouge">Command-Option-Q</code> to quit and close all windows.</p>

<p>The same can be said when you’re building a macro that pulls data from the spreadsheet tab and enter them into a different application. The default state is to close irrelevant documents and browser tabs. Then you can launch the applications for the macro to run.</p>

<h2 id="set-between-actions-delay">Set Between Actions Delay</h2>
<p>Another common problem with macro is that they can run too fast. Sometimes the application won’t be ready to respond to your macro in time and create unexpected behaviors. For example, the macro will type the value before the input field is focused.</p>

<p>The workaround is pretty simple. You can set an action delay between macro to 0.2 seconds at the beginning of the macro. Play around with the value until you can ensure that the macro runs consistently.</p>

<p class="sidenote">You can also resolve these unexpected behaviors by implementing control flows. I’ve published a <a href="https://sayzlim.net/building-keyboard-maestro-macros-tips/">collection of tips</a> to help you build your first macro before. Although it hasn’t been updated for a while, these tips are still relevant today.</p>

<h2 id="declutter-with-local-or-instance-variables">Declutter with Local or Instance Variables</h2>
<p>Variables are wonderful pieces of Keyboard Maestro. You can use it to combine a series of macros to build a simple application.</p>

<p>The common mistake with people new to Keyboard Maestro is saving variables globally. You can check if you’ve been using global variables by opening the <strong>Preferences Variables</strong> settings. Most of the time, you don’t have to expose those variables to every macro.</p>

<p><img src="https://images.sayzlim.net/2022/08/keyboard-maestro-variables-preferences.webp" alt="" title="Keyboard Maestro Value Preferences" /></p>

<p>The solution for the problem is to prepend <code class="language-plaintext highlighter-rouge">Local</code> or <code class="language-plaintext highlighter-rouge">Instance</code> to the variable so it’s available only for the executing macro during the runtime.<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">1</a></sup></p>

<p>The difference between these two is how accessible they are to the executing macro. Most of the time, you can use local variables, but you want to use instance variables when:</p>

<ul>
  <li>You want the variable accessible by the sub-macros from the executing macro.</li>
  <li>You want to keep the variable unique for each execution. For example, assuming you have a macro where you save file name to a variable called <code class="language-plaintext highlighter-rouge">InstanceFileName</code>. You can run the macro multiple times and each <code class="language-plaintext highlighter-rouge">InstanceFileName</code> will be unique even if macros run concurrently. Instance variables are useful when you have a macro that does many things in the background and you prefer not to wait for them to run sequentially.</li>
</ul>

<h2 id="debug-with-value-inspector">Debug with Value Inspector</h2>
<p>Once you start chaining multiple actions together, you will notice that you often need to check the value of the variables or tokens you plan to use. Keyboard Maestro has a built-in inspector where you can preview the value of variables. You can enable them by pressing <kbd>Command - 6</kbd> or selecting it from <strong>Window - Value Inspector</strong>.</p>

<p><img src="https://images.sayzlim.net/2022/08/keyboard-maestro-value-inspector.webp" alt="" title="Keyboard Maestro Value Inspector" /></p>

<p>Keyboard Maestro also comes with a <a href="https://wiki.keyboardmaestro.com/Tokens#List_of_Tokens">variety of tokens</a> that you can use to set up your macro. A common token you want to use is the <code class="language-plaintext highlighter-rouge">ICUDateTime</code> token, where you can customize the date format. For example, you can enter <code class="language-plaintext highlighter-rouge">%ICUDateTime%yyyy-MM-dd% </code> in the inspector to see what it looks like before implementing it in the macro.</p>
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:2" role="doc-endnote">
      <p>You can <a href="https://wiki.keyboardmaestro.com/manual/Variables">learn more about variables</a> from Keyboard Maestro documentation. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to fix EventMachine C extension error in Jekyll]]></title>
    <link href="https://sayzlim.net/fix-eventmachine-c-extension-error/"/>
    <updated>2022-07-30T00:00:00+07:00</updated>
    <id>https://sayzlim.net/fix-eventmachine-c-extension-error</id>
    <content type="html"><![CDATA[<p>Jekyll comes with a built-in live reload feature to help you preview the change as you make a change to your codes. I encountered an error after running <code class="language-plaintext highlighter-rouge">bundle update</code> recently, and it turns out the fix is straightforward.</p>

<p><img src="https://images.sayzlim.net/2022/07/jekyll-gem-event-machine-error.webp" alt="" title="EventMachine C error logs in Terminal" /></p>

<p><strong>You can resolve most of the errors</strong> by updating affected gems to the latest version.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup> However, <a href="https://github.com/eventmachine/eventmachine" title="eventmachine/eventmachine: EventMachine: fast, simple event-processing library for Ruby programs">EventMachine</a> is not exactly being actively maintained, so we don’t always receive the latest version if you’re using <a href="https://rubygems.org/">RubyGems.org</a> as the source for your Gemfile.</p>

<p>You can fix the error by updating the eventmachine gem source to the official GitHub repository. Here is the line you want to paste into the Gemfile.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem 'eventmachine', github: 'eventmachine/eventmachine'
</code></pre></div></div>

<p>After that, you can run <code class="language-plaintext highlighter-rouge">bundle update</code> to fetch the latest version of every gem in your Jekyll project.</p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>Sometimes you want to revert to the older version if the latest version is the cause of the errors. <a href="https://bundler.io/man/gemfile.5.html" title="Bundler: gemfile">Check out the official page</a> to learn more about Gemfile. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Obsidian]]></title>
    <link href="https://sayzlim.net/getting-started-obsidian/"/>
    <updated>2022-07-06T00:00:00+07:00</updated>
    <id>https://sayzlim.net/getting-started-obsidian</id>
    <content type="html"><![CDATA[<p>I’ve switched from Evernote to Obsidian because I like the idea of building a knowledge base on top of folders and Markdown files. Here are some tips to help you get started if you’re new to Obsidian.</p>

<ul id="markdown-toc">
  <li><a href="#daily-notes--fleeting-notes" id="markdown-toc-daily-notes--fleeting-notes">Daily Notes / Fleeting Notes</a></li>
  <li><a href="#basic-folders-structure" id="markdown-toc-basic-folders-structure">Basic Folders Structure</a></li>
  <li><a href="#map-and-remember-essential-shortcuts" id="markdown-toc-map-and-remember-essential-shortcuts">Map and Remember Essential Shortcuts</a>    <ul>
      <li><a href="#basic-shortcuts" id="markdown-toc-basic-shortcuts">Basic Shortcuts</a></li>
      <li><a href="#navigation-shortcuts" id="markdown-toc-navigation-shortcuts">Navigation Shortcuts</a></li>
      <li><a href="#formatting-shortcuts" id="markdown-toc-formatting-shortcuts">Formatting Shortcuts</a></li>
    </ul>
  </li>
  <li><a href="#personalize-with-theme" id="markdown-toc-personalize-with-theme">Personalize with Theme</a></li>
  <li><a href="#obsidian-graph-view" id="markdown-toc-obsidian-graph-view">Obsidian Graph View</a></li>
  <li><a href="#essential-plugins" id="markdown-toc-essential-plugins">Essential Plugins</a></li>
</ul>

<h2 id="daily-notes--fleeting-notes">Daily Notes / Fleeting Notes</h2>
<p>Enable Daily Notes from the core plugins, so it creates a new note whenever you open Obsidian. Some people also refer to daily notes as fleeting notes.</p>

<p><img src="https://images.sayzlim.net/2022/07/obsidian-daily-note-option.webp" alt="" title="Obsidian Daily's Note Options" /></p>

<p><strong>Set the default new note location</strong> inside the Fleeting folder to prevent it from cluttering the top directory.</p>

<p>Fleeting note is a scratchpad that lets you <strong>capture the ideas and information that resonates</strong> with you throughout the day.</p>

<p>There is no structure. There is no editing. There is no filter. You capture your best and worst ideas in this note. You will schedule a time to organize these ideas later.</p>

<h2 id="basic-folders-structure">Basic Folders Structure</h2>
<p>Now you have an outlet to capture your ideas with fleeting notes. You need to organize them every day or once a week. It’s your choice. Find what works for you.</p>

<p><img src="https://images.sayzlim.net/2022/07/obsidian-folders-structure.webp" alt="" title="Obsidian Folders Structure" /></p>

<p>Keep the directory structures as simple as possible if you’re new to building a knowledge base. I recommend creating these folders:</p>

<ul>
  <li><strong>Fleeting</strong> for fleeting notes.</li>
  <li><strong>Grow</strong> for notes you create by expanding the ideas you captured from fleeting notes.</li>
  <li><strong>Resources</strong> for any information that you wish to keep for references.</li>
</ul>

<p>It’s a simplified version of CODE (Collect, Organize, Distill, Express) concept from Building a Second Brain by Tiago Forte. The structure above allows you to start capturing notes without feeling overwhelmed by the ideas of organizing them.</p>

<h2 id="map-and-remember-essential-shortcuts">Map and Remember Essential Shortcuts</h2>
<p>You should memorize some shortcuts when you first start using Obsidian. Map them under Hotkeys options if they’re not available.</p>

<h3 id="basic-shortcuts">Basic Shortcuts</h3>
<ul>
  <li><kbd>Command-Shift-P</kbd> to open the command palette.</li>
  <li><kbd>Command-O</kbd> to open a file in the existing pane.</li>
  <li><kbd>Command-Shift-F</kbd> to search in all files.</li>
  <li><kbd>Command-G</kbd> to toggle the graph.</li>
  <li><kbd>Command-R</kbd> to toggle reading view.</li>
  <li><kbd>Command-Shift-M</kbd> to move the file to another folder.</li>
</ul>

<h3 id="navigation-shortcuts">Navigation Shortcuts</h3>
<ul>
  <li><kbd>Command-Option-Arrow</kbd> to navigate note history. You can remap it to <kbd>Command-Shift-Bracket</kbd> to match browser shortcuts.</li>
</ul>

<h3 id="formatting-shortcuts">Formatting Shortcuts</h3>
<p>Map the following shortcut so you can start highlighting notes.</p>
<ul>
  <li><kbd>Command-L</kbd> to highlight notes.</li>
</ul>

<p>You can learn more about <a href="https://help.obsidian.md/How+to/Format+your+notes">formatting your notes</a> from the official guide.</p>

<h2 id="personalize-with-theme">Personalize with Theme</h2>
<p>Obsidian comes up with many beautiful community themes. Browse the collection and choose the one that showcases your personality.</p>

<p><img src="https://images.sayzlim.net/2022/07/obsidian-theme-option.webp" alt="" title="Theme Selection in Obsidian" /></p>

<h2 id="obsidian-graph-view">Obsidian Graph View</h2>
<p>Graph View is useless initially if you’re new to building a knowledge base with Obsidian. It becomes more valuable as you continue making notes’ connections through WikiLinks and tags. It takes time to see the benefit of Graph View. Pick one note-taking method to build these connections — I personally use <a href="https://zettelkasten.de/posts/overview/">Zettelkasten Method</a>.</p>

<h2 id="essential-plugins">Essential Plugins</h2>
<p>There are two types of plugins. Core plugins are available in Obsidian by default. Community plugins are built by the community. You need to install them before you can use them. I don’t recommend adding too many community plugins because it may slow down Obsidian.</p>

<p>Here are some core plugins you should enable.</p>
<ul>
  <li>Daily notes — Create and open today’s daily note.</li>
  <li>Tag pane — Display your tags and their number of occurrences.</li>
  <li>Backlinks — Show links from other files to this file.</li>
</ul>

<p>You can click Browse from the community plugins options page to install community plugins. Here are some community plugins that you should consider installing.</p>
<ul>
  <li>Typewriter Scroll — It keeps the cursor centered in the editor view.</li>
  <li>Dynamic Table of Contents — Generates Table of Contents based on the document’s headings. I use this in the beginning when I capture long-form for notes.</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Repeat Actions and Macros in Keyboard Maestro]]></title>
    <link href="https://sayzlim.net/loop-repeat-macros-keyboard-maestro/"/>
    <updated>2022-07-01T00:00:00+07:00</updated>
    <id>https://sayzlim.net/loop-repeat-macros-keyboard-maestro</id>
    <content type="html"><![CDATA[<p>There are several ways to repeat macro and actions in Keyboard Maestro, and the method is different depending on your use case. I’m going to cover my favorite method in this post.</p>

<p>Three main actions that can help you repeat a macro in Keyboard Maestro.</p>
<ul>
  <li>Repeat — Repeat a macro for a specified number amount of times.</li>
  <li>Until — Repeat a macro <strong>until</strong> it meets a specified condition.</li>
  <li>While — Repeat a macro <strong>while</strong> it meets a specified condition.</li>
</ul>

<p>Most of the time, you only need to use <strong>repeat</strong> action to loop over the macros. The main advantage is that it allows you to decide how many times you want to run them and save yourself from dealing with the uncertainty of checking variables in Until and While actions.<sup id="fnref:20220701083325" role="doc-noteref"><a href="#fn:20220701083325" class="footnote" rel="footnote">1</a></sup></p>

<p>For example, sometimes, I need to get the SimilarWeb stats from the websites I found. I put these data in a spreadsheet and enter the number of times I want to repeat the macro that pulls the required information.</p>

<p>Here is the macro that shows you how it works.</p>

<p><img src="https://images.sayzlim.net/2022/07/keyboard-maestro-repeat-action.webp" alt="" title="Keyboard Maestro Repeat Action" /></p>

<p>Create an action that prompts input from you to enter the number of times you want to repeat a group of actions or a macro. Save to a variable called <code class="language-plaintext highlighter-rouge">LocalRepeatAmount</code>.</p>

<p>Create another action that repeats the actions based on the value of <code class="language-plaintext highlighter-rouge">LocalRepeatAmount</code>. The combination of repeat action and local variable lets you choose how many times you want to run the macro instead of going back into the editor to update the number of times to run the macro.</p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:20220701083325" role="doc-endnote">
      <p>These two actions are more suitable when you want to check the environment and screen conditions before you resume actions in a macro. <a href="#fnref:20220701083325" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Prioritize Health]]></title>
    <link href="https://sayzlim.net/prioritize-health/"/>
    <updated>2022-06-16T00:00:00+07:00</updated>
    <id>https://sayzlim.net/prioritize-health</id>
    <content type="html"><![CDATA[<p>In the last eight years, I’ve made a lot of decisions. There were some good and bad choices, but I always end up in a better situation if I follow this one rule.</p>

<p>Health comes first.</p>

<p>I am able to perform and think more effectively in both life and work when I make decisions that benefit my physical and mental health. I can sit without worrying about my back hurting. I can stay focused longer. I can think and analyze without feeling anxious.</p>

<p><a href="https://twitter.com/sayzlim/status/1535493652998500353">My goal</a> is to be a good parent to my children. I want to be there whenever they need me. I want to be able to carry them upstairs without hurting my knees. I want to provide for them until they are old enough to care for themselves.</p>

<p>Most people glorifying hustle culture fail to take care of their health. Even before I became a parent, I prioritized my health by <em>trying</em> to have a balanced diet and exercise regularly.</p>

<p>If you are given the option, <strong>always choose to be healthy.</strong></p>

<p>If there is one productivity tip I want to share with you, it is to keep yourself healthy so that you can do the work you’re proud of in the next two decades.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Better "Quit All" with Keyboard Maestro]]></title>
    <link href="https://sayzlim.net/better-quit-all/"/>
    <updated>2022-06-04T00:00:00+07:00</updated>
    <id>https://sayzlim.net/better-quit-all</id>
    <content type="html"><![CDATA[<p>When I’m done with the work, I enter “quitall” with Alfred and quit all the apps in the Dock. I found out that I need more control to decide which apps to keep active.</p>

<p>I’ve been using Alfred built-in <strong>Quit All</strong> to quit all the applications whenever I’m done with my work. It’s a great way to end the day so you can see a clean working space.</p>

<p>However, there are some apps that I want to keep active in the Dock such as Timemator for time tracking and Drafts for note-taking. Unfortunately, Alfred doesn’t have a built-in option to exclude apps from this command.</p>

<p>Which brings me to Keyboard Maestro.</p>

<p><img src="https://images.sayzlim.net/2022/06/keyboard-maestro-preferences.webp" alt="" title="Keyboard Maestro Excluded Preferences" /></p>

<p><strong>Keyboard Maestro offers more flexibility</strong> when it comes to building a macro that caters to your needs. All you need to do is to add the apps you want to exclude from the preferences and the app will take care of the rest.</p>

<p><img src="https://images.sayzlim.net/2022/06/alfred-quitall-command.webp" alt="" title="Alfred Custom 'Quit All' Command" /></p>

<p>The next thing you want to do is to create a search command in Alfred that runs <code class="language-plaintext highlighter-rouge">/usr/bin/osascript (AppleScript)</code>. You can paste the script below to tell Keyboard Maestro Engine to execute the</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-- The passed query is the UUID of the macro
tell application "Keyboard Maestro Engine"
  do script "5F2B4E32-239D-4B46-BA07-2F0F103CE1EA"
end tell
</code></pre></div></div>

<p><img src="https://images.sayzlim.net/2022/06/keyboard-maestro-copy-uuid.webp" alt="" title="Copy Macro UUID in Keyboard Maestro" /></p>

<p>You can get the UUID of a macro by right-clicking and selecting <strong>Copy as UUID</strong> from the contextual menu. For example, <code class="language-plaintext highlighter-rouge">5F2B4E32-239D-4B46-BA07-2F0F103CE1EA</code> is the UUID for the Quit All macro in my library.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Text Expansion with Keyboard Maestro]]></title>
    <link href="https://sayzlim.net/text-expansion-keyboard-maestro/"/>
    <updated>2022-05-19T07:00:00+07:00</updated>
    <id>https://sayzlim.net/text-expansion-keyboard-maestro</id>
    <content type="html"><![CDATA[<p>I replaced TextExpander with Keyboard Maestro as my primary text expansion tool because I prefer the native editing experience and the flexibility that Keyboard Maestro offers.</p>

<p>The post on <a href="/memorable-textexpander-abbreviations/" title="Creating Memorable TextExpander Abbreviations - Sayz Lim">creating memorable abbreviations</a> is still relevant regardless of what apps you use for this task. In this post, I’m going to share some tips and changes I’ve made to import the snippets that I often use in TextExpander.</p>

<h2 id="organize-them-with-emoji">Organize Them with Emoji</h2>
<p>By default, Keyboard Maestro sorts macro groups by name. The only way to categorize similar macro groups together is by prepending the group name with a symbol or an emoji — I wrote a post that covers more details on <a href="/organize-keyboard-maestro-macros/" title="How I Organize Keyboard Maestro Macro Groups - Sayz Lim">organizing your library separately</a>.</p>

<p><img src="https://images.sayzlim.net/2022/05/keyboard-maestro-text-expansion.webp" alt="" title="Organize Keyboard Maestro Groups with Emoji" /></p>

<p>I have more than ten snippet groups in TextExpander. However, I’ve decided to import two snippet groups that I often use and prepend them with “Media Shuffle Playback” emoji 🔀 which is kind of similar to expanding.</p>

<ul>
  <li><strong>🔀 Avoid These Words</strong>: This group contains the word that I want to avoid and correct. It also omits some useless words like <strong>basically</strong>, <strong>actually</strong>, and <strong>clearly</strong>.</li>
  <li><strong>🔀 Text Expansion (or General)</strong>: This group acts as a general group for my most frequently used snippets. I might move some of them to their dedicated group later on.</li>
</ul>

<h2 id="prompt-for-user-input">Prompt for User Input</h2>
<p>One of the key features that make TextExpander great is its wide selection of fill-in fields that allows you to complete the missing snippet details on the fly.</p>

<p>Here’s an example of this kind of snippet:</p>

<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hi <span class="nt">&lt;FirstName&gt;</span>,

I'm from <span class="nt">&lt;AgencyName&gt;</span> which specializes in helping offline business grow their online presence through social media and website branding.

I researched about <span class="nt">&lt;LeadCompany&gt;</span> and want to share some tips to help you gain more customers:

{ list the reasons }

Are you available for a quick call to discuss this partnership?
</code></pre></div></div>

<p>You can request all these details with Prompt for User Input action and save them to local variables before expanding them. Here is what it looks like in Keyboard Maestro.</p>

<p class="sidenote">Prepending <code class="language-plaintext highlighter-rouge">Local</code> to the variable name will make it available only to the macro calling it. <a href="https://wiki.keyboardmaestro.com/manual/Variables" title="Keyboard Maestro Variables">Learn more here</a>.</p>

<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hi %Variable%LocalFirstName%,

I'm from %Variable%LocalAgencyName% which specializes in helping offline business grow their online presence through social media and website branding.

I researched about %Variable%LocalLeadCompany% and want to share some tips to help you gain more customers:

{ list the reasons }

Are you available for a quick call to discuss this partnership?
</code></pre></div></div>

<h2 id="prompt-with-list-from-text">Prompt with List from Text</h2>
<p>Here is a simple macro that you can create that lets you choose which email address to use. By assigning <code class="language-plaintext highlighter-rouge">@@@</code> as the abbreviation, you can enter your email addresses as a list that you can choose whenever you need them.</p>

<p><img src="https://images.sayzlim.net/2022/05/keyboard-maestro-email.webp" alt="" title="Keyboard Maestro Prompt with List from Text" /></p>

<p>You can enter your personal email address and work email address in this macro. Another example use case is whenever I write an email template that offers different questions or options. Instead of writing them down whenever there is a prompt, you can save them into a list and select them with a filter.</p>

<h2 id="format-with-icudatetime">Format with ICUDateTime</h2>
<p>I have a specific use case where I expand <code class="language-plaintext highlighter-rouge">.now</code> into today’s date. It’s nothing fancy. I use them to prepend my notes and files that should be sorted by date in the file system.</p>

<p>By combining it with Prompt with List from Text action, I set up a shortcut for <code class="language-plaintext highlighter-rouge">.pay</code> that lets me name the note I send to my Evernote’s Receipts notebook.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>%ICUDateTime%yyyy-MM-dd% %Variable%LocalClipboard%
</code></pre></div></div>

<h2 id="insert-by-pasting-vs-insert-by-typing">Insert by Pasting vs Insert by Typing</h2>
<p><strong>Insert by Pasting offers better performance</strong> because it doesn’t need to simulate any keystrokes. However, you will encounter some scenarios where using Insert by Typing is an ideal choice. Here are some of those scenarios:</p>

<ul>
  <li>Some websites prevent you from pasting from your clipboard into their email/password field.</li>
  <li>You want to maintain the focus of the dialog/input window from applications like Alfred or Spotlight.</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HubSpot Deployment Shell Script]]></title>
    <link href="https://sayzlim.net/hubspot-deployment-shell-script/"/>
    <updated>2022-05-14T09:00:00+07:00</updated>
    <id>https://sayzlim.net/hubspot-deployment-shell-script</id>
    <content type="html"><![CDATA[<p>I started building and managing websites with HubSpot recently because it offers the flexibility to allow other team members, especially those who are in the marketing team, to create and customize a landing page.</p>

<p>Instead of following recommended deployment method by HubSpot, I need to find a way to make the development process seamless while also allowing the rest of the team members to make changes in the Design Tools. It means that the rest of the team members don’t have to use version control if they prefer to update the code directly.</p>

<p>I decided to write a shell script that allows me to choose which folder to fetch, upload, and watch. Here is the content of the shell script:</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/usr/bin/env zsh</span>

<span class="c"># List of projects in their respective folder</span>
<span class="c"># "folder_paths" is a dictionary, you can add more folders</span>
<span class="c"># if you need to specify a different project to watch.</span>
<span class="nb">declare</span> <span class="nt">-A</span> folder_paths

folder_paths[root]<span class="o">=</span><span class="s2">"Default/"</span>
folder_paths[carbon]<span class="o">=</span><span class="s2">"Templates/Carbon/"</span>
folder_paths[publishers]<span class="o">=</span><span class="s2">"Templates/Publishers/"</span>

<span class="c"># Default Options</span>
<span class="nv">portal</span><span class="o">=</span><span class="k">${</span><span class="nv">portal</span><span class="k">:-</span><span class="nv">DEV</span><span class="k">}</span>
<span class="nv">project</span><span class="o">=</span><span class="k">${</span><span class="nv">project</span><span class="k">:-</span><span class="nv">root</span><span class="k">}</span>
<span class="nv">action</span><span class="o">=</span><span class="k">${</span><span class="nv">action</span><span class="k">:-</span><span class="nv">watch</span><span class="k">}</span>

<span class="k">while</span> <span class="o">[</span> <span class="nv">$# </span><span class="nt">-gt</span> 0 <span class="o">]</span><span class="p">;</span> <span class="k">do
   if</span> <span class="o">[[</span> <span class="nv">$1</span> <span class="o">==</span> <span class="k">*</span><span class="s2">"--"</span><span class="k">*</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
        </span><span class="nv">param</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">1</span><span class="p">/--/</span><span class="k">}</span><span class="s2">"</span>
        <span class="nb">declare</span> <span class="nv">$param</span><span class="o">=</span><span class="s2">"</span><span class="nv">$2</span><span class="s2">"</span>
        <span class="c"># echo $1 $2 // Optional to see the parameter:value result</span>
   <span class="k">fi
  </span><span class="nb">shift
</span><span class="k">done</span>

<span class="c"># Main Commands</span>
<span class="nb">echo</span> <span class="s2">"[Working Portal] : </span><span class="se">\"</span><span class="s2">"</span><span class="k">${</span><span class="nv">portal</span><span class="k">}</span> <span class="s2">"portal"</span><span class="se">\"</span>
<span class="nb">echo</span> <span class="s2">"[Selected Folder] : </span><span class="se">\"</span><span class="k">${</span><span class="nv">folder_paths</span><span class="p">[</span><span class="k">${</span><span class="nv">project</span><span class="k">}</span><span class="p">]</span><span class="k">}</span><span class="se">\"</span><span class="s2">"</span>
hs <span class="k">${</span><span class="nv">action</span><span class="k">}</span> <span class="nt">--account</span><span class="o">=</span><span class="k">${</span><span class="nv">portal</span><span class="k">}</span> <span class="s2">"</span><span class="k">${</span><span class="nv">folder_paths</span><span class="p">[</span><span class="k">${</span><span class="nv">project</span><span class="k">}</span><span class="p">]</span><span class="k">}</span><span class="s2">"</span> <span class="s2">"</span><span class="k">${</span><span class="nv">folder_paths</span><span class="p">[</span><span class="k">${</span><span class="nv">project</span><span class="k">}</span><span class="p">]</span><span class="k">}</span><span class="s2">"</span>
</code></pre></div></div>

<h2 id="how-it-works">How It Works</h2>
<p>For example, if I need to upload the changes I made to the Carbon website, I can run this command:</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>zsh deploy.sh <span class="nt">--action</span> upload <span class="nt">--portal</span> PROD <span class="nt">--project</span> carbon
</code></pre></div></div>

<p>The available commands are based on <a href="https://developers.hubspot.com/docs/cms/developer-reference/local-development-cli" title="Local Development Tooling: CLI Reference">HubSpot CLI</a>. You can also run other commands such as <code class="language-plaintext highlighter-rouge">--action watch</code> if you wish to watch and preview the changes you’ve made locally on the staging or production.</p>

<p>I want to share why this shell script is important in the daily workflow. When it comes to the business, we need to be able to prioritize. If you’re like me, you probably want to follow the best practice to deploy changes to the production website. However, there are other factors to take into consideration.</p>

<ul>
  <li>The team members must be able to make changes using HubSpot Design Tools without waiting for developers.</li>
  <li>Developers must be able to use keep the version history of the changes they’ve made to the project.</li>
  <li>Several developers should still be able to collaborate through the shared remote repository.</li>
</ul>

<p>Although it’s ideal to set up Continuous Integration with the GitHub repository, I feel that creating a simple shell script above can accommodate the current needs of the business where we need the flexibility from both marketers and developers to push updates quickly.</p>

<p>One thing I’ve learned from being on the side of “not” working with codes and working with codes directly is to choose the most efficient and resilient method when it comes to solving a problem.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tips to Maintain a Forked Repository]]></title>
    <link href="https://sayzlim.net/tips-maintain-forked-repository/"/>
    <updated>2021-09-13T17:00:00+07:00</updated>
    <id>https://sayzlim.net/tips-maintain-forked-repository</id>
    <content type="html"><![CDATA[<p>Working with <a href="https://www.carbonads.net" title="Carbon Ads">Carbon</a> means I have to fork some open-source projects to submit a pull request with the ad code integration. Here is the list of the tips I’ve collected while learning how to contribute to the public repositories.</p>

<p>By forking a repository, it means that you’ve cloned an identical project that you can edit. Whenever you make a mistake, the worst-case scenario is to delete the forked repository and clone it again.</p>

<p>The main purpose of these tips is to <strong>avoid resetting the repository</strong> and understand the workflow to contribute back to the upstream project.</p>

<p class="sidenote">I will be referring to the <code class="language-plaintext highlighter-rouge">master</code> branch as <code class="language-plaintext highlighter-rouge">main</code> in this post. They can be used interchangeably, but most new projects prefer to name their default branch as <code class="language-plaintext highlighter-rouge">main</code>.</p>

<h2 id="always-create-a-new-branch">Always Create a New Branch</h2>
<p>Branching is a safe way for you to experiment with a new feature without affecting the main branch. Even if you’re making a minor update to the <code class="language-plaintext highlighter-rouge">README</code>, you’re still going to create a new branch because it will keep the main branch clean.</p>

<p>Whenever you’re done with a feature, you can push the branch you’re working to your forked repository. Then, you can follow up by submitting a pull request to the upstream.</p>

<p class="sidenote">The <code class="language-plaintext highlighter-rouge">upstream</code> remote refers to <strong>the original source</strong> of your forked repository. You can check the configured remote repository by running <code class="language-plaintext highlighter-rouge">git remote -v</code> in Terminal. <a href="https://docs.github.com/en/github/collaborating-with-pull-requests/working-with-forks/configuring-a-remote-for-a-fork" title="Configuring a remote for a fork - GitHub Docs">Follow this guide by GitHub</a> to configure remote repository.</p>

<h2 id="never-commit-to-the-main-branch">Never Commit to the Main Branch</h2>
<p>You should never commit to the main branch. I mentioned before that we want to keep the main branch clean. What exactly do we want to keep it clean from?</p>

<p>We don’t want our local commits in the main branch.</p>

<p>The local main branch should always match to the upstream origin. Adding commits to the local main branch will create conflicts that trigger Git to asks you merge, rebase, or fast-forward the tree history.</p>

<p>Instead of committing to the main branch, you want the upstream maintainer to accept your pull request, and then you can match the HEAD of your main branch to the upstream main branch. Here’s the command you can run:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">git switch main
git pull upstream main --ff
</span></code></pre></div></div>

<p>Let’s run through each line. <code class="language-plaintext highlighter-rouge">git switch main</code> lets you switch to the <code class="language-plaintext highlighter-rouge">main</code> branch where you can apply the update from the upstream. Once you’re on the <code class="language-plaintext highlighter-rouge">main</code> branch, you can pull the latest update and pass <code class="language-plaintext highlighter-rouge">--ff</code> option to fast forward the commits. It’s optional to pass <code class="language-plaintext highlighter-rouge">--ff</code> if you keep the main branch clean, however, it’s a good practice to always decide how you want to deal with the conflicts.</p>

<h2 id="dealing-with-conflicts-on-main-branch">Dealing with Conflicts on Main Branch</h2>
<p>I often messed up the main branch when I was learning using Git. The most common mistake is to run this command on the main branch.</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">git pull upstream main
</span></code></pre></div></div>

<p>Here is the problem with the command above.</p>

<p>You’re telling git to fetch and update the active branch to match the remote branch <strong>without specifying how you want to deal with the conflicts</strong>.</p>

<p>Then this happens:</p>
<ol>
  <li>I panicked because I didn’t know how to deal with the conflicts.</li>
  <li>I gave up, deleted the folder, and recloned the remote repository.</li>
</ol>

<p>There is no need to panic because you’re still working on your local and remote branch.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup> The worst-case scenario is to delete and refork the repository if you’re still unfamiliar with Git.</p>

<p>However, you can easily fix this issue by running this command:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">git reflog
git reset HEAD@{index}
</span></code></pre></div></div>

<p>Let’s break down the command above.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">reflog</code> shows the history of updates that happened to the tip of branches in the local repository.</li>
  <li><code class="language-plaintext highlighter-rouge">git reset HEAD@{index}</code> reset the branch to the number of moves based on the passed <code class="language-plaintext highlighter-rouge">index</code> value. <code class="language-plaintext highlighter-rouge">HEAD@{index}</code> is one of many ways to specify revision value. I personally prefer to use the <code class="language-plaintext highlighter-rouge">sha1</code> value.</li>
</ul>

<h2 id="syncing-local-main-branch-to-upstream">Syncing Local Main Branch to Upstream</h2>
<p>You can deal with most conflicts locally before submitting a pull request. The reason is the upstream main branch might have received more commits since the last time you cloned it. Match the tip of your local main branch to the upstream main branch. Here’s what you can run:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">git fetch upstream main
git switch main &amp;&amp; rebase upstream/main
git push origin main
</span></code></pre></div></div>

<h2 id="pushing-force-to-remote-branch">Pushing –Force to Remote Branch</h2>
<p>Sometimes I want to set things right for both local and remote repository. I don’t plan to keep any updates I’ve made and my main goal is to sync local and remote repository to restart everything.</p>

<p class="sidenote"><strong>You can only do this if you’re the only one who manage repository</strong>. For example, I can do it for my Jekyll site because the repository is private and no one else will be affected if I forcibly push an update to the remote repository.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git reflog
git reset --hard &lt;sha1-value&gt;
git branch -r
git fetch upstream main &amp;&amp; git rebase upstream/main
git push --force origin main
</code></pre></div></div>

<ol>
  <li>Check for the <code class="language-plaintext highlighter-rouge">sha1</code> value we’re going to pass into the <code class="language-plaintext highlighter-rouge">git reset</code> command.</li>
  <li>Reset the branch before it’s broken.</li>
  <li>List all remote repositories with their branches. Most of the time, you’re looking at the <code class="language-plaintext highlighter-rouge">upstream/main</code> branch.</li>
  <li>Fetch the <code class="language-plaintext highlighter-rouge">main</code> branch from <code class="language-plaintext highlighter-rouge">upstream</code> and rebase local <code class="language-plaintext highlighter-rouge">main</code> branch to the upstream <code class="language-plaintext highlighter-rouge">main</code> branch.</li>
  <li>Push local <code class="language-plaintext highlighter-rouge">main</code> branch to <code class="language-plaintext highlighter-rouge">origin/main</code> remote branch.</li>
</ol>

<p>This step will ensure you have a clean slate of a local and remote main branch without deleting the forked repository. Next, create and start your work from the new branch.</p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>Unless you’re working in a company that allows you to push your commit to the remote main branch. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Fix 'jekyll-autoprefixer' Error Running Ruby 3.0.0]]></title>
    <link href="https://sayzlim.net/fix-jekyll-autoprefixer-error/"/>
    <updated>2021-07-15T15:00:00+07:00</updated>
    <id>https://sayzlim.net/fix-jekyll-autoprefixer-error</id>
    <content type="html"><![CDATA[<p>I postponed upgrading my Ruby environment to 3.x.x for a while because I couldn’t build or serve this Jekyll site due to the error with <code class="language-plaintext highlighter-rouge">jekyll-autoprefixer</code>.</p>

<p>Here is the error I encountered when I tried to build this site.</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">TypeError: Cannot read property 'version' of undefined (ExecJS::ProgramError)
</span></code></pre></div></div>

<p class="sidenote">I assume you’re using <a href="https://bundler.io/" title="Bundler: The best way to manage a Ruby application's gems">Bundler</a> to manage the gems. If you’re not familiar with Bundler, I recommend that you check it out and use it to set up dependencies for your project.</p>

<p>You can fix the error by downgrading <code class="language-plaintext highlighter-rouge">execjs</code> back to 2.7.0.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup> Add the following line <code class="language-plaintext highlighter-rouge">gem 'execjs', '2.7.0'</code> to your Gemfile.</p>

<p>Then run <code class="language-plaintext highlighter-rouge">bundle update</code> to update all the installed gems.</p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>You can <a href="https://github.com/vwochnik/jekyll-autoprefixer/issues/11" title="ExecJS 2.8.0 breaks Jekyll">check out this issue</a> to see a different method to fix it. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Verify 'osxkeychain helper' Personal Access Token]]></title>
    <link href="https://sayzlim.net/verify-osxkeychain-helper/"/>
    <updated>2021-07-10T00:00:00+07:00</updated>
    <id>https://sayzlim.net/verify-osxkeychain-helper</id>
    <content type="html"><![CDATA[<p>I like using GitHub for macOS because it lets me compare the difference of files before each commit. If you’ve configured credential helper to <a href="https://docs.github.com/en/get-started/getting-started-with-git/caching-your-github-credentials-in-git" title="Caching your GitHub credentials in Git - GitHub Docs">tell Git to remember your password</a>, you also want to learn how to verify that the personal access token has been stored correctly.</p>

<p>The official application uses HTTPS as the default protocol, so I have to enter the password every time I want to push the update in Terminal. Caching the credentials allows me to continue using HTTPS as the protocol while offering the flexibility to push the updates through the <code class="language-plaintext highlighter-rouge">git</code> command.</p>

<p><a href="https://images.sayzlim.net/2021/07/osxkeychain-helper.webp" title="GitHub Personall Access Token in macOS Keychain Access"> <img src="https://images.sayzlim.net/2021/07/osxkeychain-helper.webp" alt="GitHub Personall Access Token in macOS Keychain Access" title="GitHub Personall Access Token in macOS Keychain Access" /> </a></p>

<p>Here’s how you can verify that <code class="language-plaintext highlighter-rouge">osxkeychain helper</code> is storing your personal access token.</p>

<ol>
  <li>Open Keychain Access with Spotlight</li>
  <li>Search for <code class="language-plaintext highlighter-rouge">github.com</code> — it will show up as an “Internet password”</li>
  <li>Double-click on the item to view the attributes</li>
  <li>Click “Show password” and enter your macOS account password to view the access token</li>
  <li>Open “Access Control” to verify that <code class="language-plaintext highlighter-rouge">git credential-osxkeychain</code> CLI is the only one that can access this item</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self-Host Plausible with Amazon EC2 Free Tier]]></title>
    <link href="https://sayzlim.net/self-host-plausible-amazon-ec2/"/>
    <updated>2021-07-04T00:00:00+07:00</updated>
    <id>https://sayzlim.net/self-host-plausible-amazon-ec2</id>
    <content type="html"><![CDATA[<p>I decided to self-host Plausible because I want to keep the cost of maintaining this site as low as possible. So here are some resources to help you configure Plausible for free on Amazon EC2.</p>

<p><a href="https://plausible.io/" title="Plausible Analytics - Simple, privacy-friendly alternative to Google Analytics">Plausible</a> is lightweight and privacy-friendly analytics for people who want to see only the essential stats of their site.</p>

<p>If you’re not concerned with the pricing, you can subscribe to their basic plan for $6/month and track the page views up to 10k per month. Choosing this option means you can focus on growing your projects and spend less time managing the server running Plausible.</p>

<p>The main advantage of self-hosting Plausible is the cost. You can eliminate the cost of analytics by creating a virtual machine on the cloud. Thanks to the folks at Plausible for making the project open-source; you can easily create a free instance on Amazon EC2 and get Plausible running in hours.</p>

<h2 id="getting-started-with-amazon-ec2">Getting Started with Amazon EC2</h2>
<p><a href="https://aws.amazon.com/ec2/" title="Amazon EC2">Amazon EC2</a> is a web service that lets you create virtual machines (known as instances) in the cloud. They’re also known as <strong>Cloud Server</strong>.</p>

<p>Other cloud servers also offer free-tier, but I’m going to use Amazon EC2 because I’ve already used Amazon S3 for my static documents. Sign in with your Amazon account to access the dashboard.</p>

<p>Follow these steps to create a new instance that we will use to set up Plausible.</p>
<ol>
  <li>Select “Instances” from the sidebar</li>
  <li>Select “Launch Instances”</li>
  <li>Enable “Free-tier only” filter in the sidebar</li>
  <li>Choose Ubuntu Server 20.04 LTS (HVM) 64-bit (x86)</li>
  <li>Choose the free tier option in the list</li>
  <li>Select “Review and Launch” to complete the instance setup</li>
  <li>Save the <code class="language-plaintext highlighter-rouge">PEM</code> certificate somewhere safe</li>
</ol>

<p>You’ll be asked to name the <code class="language-plaintext highlighter-rouge">PEM</code> certificate. I name the certificate as <code class="language-plaintext highlighter-rouge">aws-ubuntu</code> and save it in <code class="language-plaintext highlighter-rouge">~/.ssh</code> directory. <strong>Keep the certificate safe</strong> because you will need it whenever you want to access the server.</p>

<p>Before connecting to the instance you’ve just created, you need to set the inbound security rules to accept requests made to port 80 and 443. You can click on the running instance and select the <strong>Security</strong> tab under the instance summary. Next, click on the security groups and set the following inbound rules.</p>

<table>
  <thead>
    <tr>
      <th>Type</th>
      <th>Protocol</th>
      <th>Port range</th>
      <th>Source</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>HTTP</td>
      <td>TCP</td>
      <td>80</td>
      <td>0.0.0.0/0</td>
    </tr>
    <tr>
      <td>SSH</td>
      <td>TCP</td>
      <td>22</td>
      <td>0.0.0.0/0</td>
    </tr>
    <tr>
      <td>HTTPS</td>
      <td>TCP</td>
      <td>443</td>
      <td>0.0.0.0/0</td>
    </tr>
  </tbody>
</table>

<h2 id="connecting-instance-through-ssh">Connecting Instance Through SSH</h2>
<p><strong>Make sure you can connect to the instance through SSH.</strong> You can follow the instructions under the “Connect” tab to get started. I personally use macOS built-in Terminal application to access the remote server.</p>

<p>Here’s a command you enter into Terminal with the information you copied from the “Connect” tab.</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">ssh -i "aws-ubuntu.pem" ubuntu@ec2-1-111-222-33.us-east-2.compute.amazonaws.com
</span></code></pre></div></div>

<p class="sidenote">The command you want to paste will look different from the one you see above. Pay attention to the name of the <code class="language-plaintext highlighter-rouge">PEM</code> certificate and the remote address to access your server.</p>

<h2 id="notes-on-setting-up-plausible">Notes on Setting Up Plausible</h2>
<p>Tyler has written a <a href="https://tinkerlog.dev/journal/self-hosting-analytics-with-plausible-and-nginx-on-ubuntu-server" title="Self hosting analytics with Plausible &amp; NGINX on Ubuntu Server | Tinker log">concise tutorial to help you setting up Plausible on a Ubuntu Server</a>. You should be able to get Plausible running if you follow each step carefully.</p>

<p>Here are some notes you want to pay attention to when setting up Plausible.</p>

<p class="sidenote">Executing commands as a root user is not exactly a best practice when it comes to managing a remote server. You usually want to set up a separate user account under the <code class="language-plaintext highlighter-rouge">sudo</code> group. However, for a personal project like this, you can skip creating a user account if you’re not comfortable with accounts management.</p>

<p><strong>Public IPv4 address</strong> is the IP address you want to set up as A record under the DNS configuration. For example, I access my dashboard from stats.sayzlim.net, so I will have to set the A record to point to my server’s public IP address. Make sure to set the proxy status to DNS only if you’re on CloudFlare.</p>

<p>Add <code class="language-plaintext highlighter-rouge">DISABLE_REGISTRATION=true</code> to <code class="language-plaintext highlighter-rouge">plausible-conf.ev</code> file to prevent people signing up a new account on your self-hosted Plausible.</p>

<p>Run <code class="language-plaintext highlighter-rouge">docker ps</code> to list all the active containers. Plausible will only work if those four containers are running. I spent hours debugging because I entered a wrong secret key. It turned out one of the containers will not run if the key length is not <code class="language-plaintext highlighter-rouge">Base64</code>.</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">hosting_plausible_1
hosting_plausible_events_db_1
hosting_mail_1
hosting_plausible_db_1
</span></code></pre></div></div>

<p>Be patient when setting up SSL certificates with certbot. Verify that the <code class="language-plaintext highlighter-rouge">server_name</code> in <code class="language-plaintext highlighter-rouge">/etc/nginx/sites-enabled/plausible</code> has been set to the correct URL. You can verify the A record by running the <code class="language-plaintext highlighter-rouge">nslookup</code> command. For example, I will run <code class="language-plaintext highlighter-rouge">nslookup stats.sayzlim.net</code> and expect the public IP address in the result.</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">Server:		192.168.1.1
</span><span class="gp">Address:	192.168.1.1#</span>53
<span class="go">
Non-authoritative answer:
Name:	stats.sayzlim.net
Address: 3.143.214.18
</span></code></pre></div></div>

<p>Send me a Twitter DM if you encounter any problems while trying to get Plausible configured on Amazon EC2. Also, make sure to <a href="https://github.com/sponsors/plausible" title="Sponsor @plausible on GitHub Sponsors · GitHub">sponsor Plausible</a> if you’ve successfully self-hosted it on your server.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Feedbin in 2021]]></title>
    <link href="https://sayzlim.net/using-feedbin/"/>
    <updated>2021-06-01T00:00:00+07:00</updated>
    <id>https://sayzlim.net/using-feedbin</id>
    <content type="html"><![CDATA[<p>I found out today that I’ve been using Feedbin for seven years. Feedbin started as a simple feed reader, which I used to sync over to third-party RSS clients such as <a href="https://www.reederapp.com/" title="Reeder 5">Reeder</a> and <a href="https://www.goldenhillsoftware.com/unread/" title="Unread: An RSS Reader">Unread</a>. These days, I read everything on Feedbin.</p>

<p><a href="https://feedbin.com/" title="Feedbin">Feedbin</a> added many features while I was away from my daily reading. Here are some of the features that changed the way I use Feedbin.</p>

<h3 id="send-to-feedbin-bookmarklet">Send to Feedbin Bookmarklet</h3>
<p>I used to assign my <strong>Read Later</strong> and <strong>RSS Subscription</strong> into two services: Instapaper and Feedbin.</p>

<p><a href="https://images.sayzlim.net/2021/06/feedbin-bookmarklet.webp" title="Send to Feedbin Bookmarklet"> <img src="https://images.sayzlim.net/2021/06/feedbin-bookmarklet.webp" alt="Send to Feedbin Bookmarklet" title="Send to Feedbin Bookmarklet" /> </a></p>

<p>Instapaper has a bookmarklet known as <strong>Save to Instapaper</strong> that you can put in the <strong>Favorites Bar</strong> to save articles conveniently. I will save any noteworthy articles to Instapaper and archive the read items to a notebook called <strong>Histories</strong> in Evernote.</p>

<p>Although I enjoy both services, I find that switching between applications for one purpose — reading and saving interesting ideas — is a distraction.</p>

<p><strong>Send to Feedbin</strong> works like <strong>Save to Instapaper</strong> by letting you send any articles to the “Pages” folder in Feedbin. By having all the subscriptions and saved articles in a single location, I can maintain the same reading experience everywhere.</p>

<p>Feedbin also does a terrific job in parsing the article with excellent integration to Evernote, where you can save these items in the semantic structure.</p>

<h3 id="recently-read">Recently Read</h3>
<p>I’m surprised that this folder is not available by default on most feed readers. I’m the type of person who tends to accidentally mark an item, so having this little folder to show my recently read items makes it easy to revisit any read items that I forgot to save to Evernote.</p>

<p><a href="https://images.sayzlim.net/2021/06/feedbin-main.webp" title="Feedbin Home"> <img src="https://images.sayzlim.net/2021/06/feedbin-main.webp" alt="Feedbin Home" title="Feedbin Home" /> </a></p>

<h3 id="actions-and-smart-filters">Actions and Smart Filters</h3>
<p>If you subscribe to popular sites that publish many articles per week, you can choose to receive notification only when the article contains a particular keyword.</p>

<p>You can achieve the setup above with <strong>Feedbin Actions</strong>.</p>

<p>You can choose to receive Push Notification if the article contains “iPhone” in the body or mark the article as read when it has [Sponsor] in the title.<sup id="fnref:2021060282957" role="doc-noteref"><a href="#fn:2021060282957" class="footnote" rel="footnote">1</a></sup></p>

<h3 id="subscribe-to-newsletters">Subscribe to Newsletters</h3>
<p>I gave up on Evernote when they stopped offering email forwarding unless you’re on the <strong>Premium Plan</strong>. Fortunately, Feedbin added this feature when I started actively using it again.</p>

<p>When you signed up for Feedbin, you will receive an email address that you can use to subscribe to newsletters. Every incoming email will be assigned with a tag you configured in the settings.<sup id="fnref:2021060282938" role="doc-noteref"><a href="#fn:2021060282938" class="footnote" rel="footnote">2</a></sup></p>

<p>Having Feedbin manage my newsletters means I can leave my inbox for low-volume emails.</p>

<p><strong>Avoid using Feedbin email address to subscribe to newsletters</strong>. It will be difficult to update your subscription if you decide to stop using Feedbin one day. Instead, you want to take advantage of Gmail plus notation and create a smart rule to forward incoming emails to Feedbin. For example, I will subscribe to a newsletter with <code class="language-plaintext highlighter-rouge">email+feedbin@gmail.com</code> and ask Gmail to forward the emails to <code class="language-plaintext highlighter-rouge">randomGeneratedNumbers@newsletters.feedbin.com</code></p>

<p>Another thing I like about keeping newsletters in Feedbin means I can save these newsletters to Evernote for safekeeping with a simple shortcut.</p>
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:2021060282957" role="doc-endnote">
      <p>I don’t recommend marking sponsored posts as read if you wish to support your favorite bloggers. <a href="#fnref:2021060282957" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2021060282938" role="doc-endnote">
      <p>The obvious tag to use in the settings is “Newsletter”. <a href="#fnref:2021060282938" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Better Way to Set Default Application on macOS]]></title>
    <link href="https://sayzlim.net/set-default-apps-mac/"/>
    <updated>2021-05-20T00:00:00+07:00</updated>
    <id>https://sayzlim.net/set-default-apps-mac</id>
    <content type="html"><![CDATA[<p>Have you ever found that setting default application for documents on macOS is an annoying experience? It’s difficult to find out which documents that you’ve modified before. I will show you a better way to set the default application.</p>

<p>Here is the standard workflow to set the default application on Mac.</p>

<ol>
  <li>Select the document with the file extension that you want to update. For example, if you’re going to open <code class="language-plaintext highlighter-rouge">txt</code> document with iA Writer as the default application, you will want to select the <code class="language-plaintext highlighter-rouge">txt</code> document in Finder.</li>
  <li>Get the document’s info by pressing <code class="language-plaintext highlighter-rouge">Command - I</code> or right-click and select <code class="language-plaintext highlighter-rouge">Get Info</code>.</li>
  <li>Expand the <code class="language-plaintext highlighter-rouge">Open with:</code> section and choose iA Writer from the list.</li>
  <li>Click <code class="language-plaintext highlighter-rouge">Change All</code> to set iA Writer as the default application for all documents with <code class="language-plaintext highlighter-rouge">txt</code> as the extension.</li>
</ol>

<p>It’s a straightforward process, but you won’t be able to tell which document that you’ve modified before. You’re also limited to only one default application per document type. Most people use more than one text and image editing application. You want to be able to select the default application based on the rules you’ve created.</p>

<h2 id="set-default-application-with-openin">Set Default Application with OpenIn</h2>
<p><a href="https://loshadki.app/openin/" title="OpenIn - Loshadki Apps">OpenIn</a> is a new application I discovered while I was searching for <a href="https://sayzlim.net/customize-default-apps-magic-launch/" title="Customize Default Apps with Magic Launch - Sayz Lim">Magic Launch</a> replacement. Unfortunately, Magic Launch doesn’t receive any more updates because they’ve built an application that takes advantage of the macOS native UI framework to create rules.</p>

<p>Since I’m familiar with Magic Launch, I will compare many aspects of OpenIn to Magic Launch.</p>

<p>When you first open OpenIn, you can set the default browser and mail apps in their respective preference window.</p>

<p><a href="https://images.sayzlim.net/2021/05/openin-settings.webp" title="OpenIn Settings"> <img src="https://images.sayzlim.net/2021/05/openin-settings.webp" alt="OpenIn Settings" title="OpenIn Settings" /> </a></p>

<p>It’s convenient to set the default application on macOS with OpenIn. Under the <strong>File types</strong>, you can add the document type to view all the applications that can open the associated document. For example, I’ve added <code class="language-plaintext highlighter-rouge">jpg</code> document type, and it shows me the list of applications that support this document type. I’ve also used the <code class="language-plaintext highlighter-rouge">Quick Actions</code> to disable all the applications and enable Pixelmator Pro, Sketch, and CleanShot X.</p>

<h2 id="opening-document-with-openin">Opening Document with OpenIn</h2>
<p>OpenIn has implemented a quick method for people to choose which application to open when several applications are set as default. It will present a list of applications that can be selected with a mouse cursor or number shortcut.</p>

<p><a href="https://images.sayzlim.net/2021/05/openin-preview.gif" title="Opening Documents with OpenIn"> <img src="https://images.sayzlim.net/2021/05/openin-preview.gif" alt="Opening Documents with OpenIn" title="Opening Documents with OpenIn" /> </a></p>

<p>There are also advanced preferences that you can set with OpenIn. Here is one area where OpenIn design direction pales compared to Magic Launch. Instead of opting to the <a href="https://developer.apple.com/design/human-interface-guidelines/macos/fields-and-labels/search-fields/" title="Search Fields - Fields and Labels - macOS - Human Interface Guidelines - Apple Developer">scope bars</a> to let us set rules for each file type, OpenIn presents the options in the sidebar. It exposes unnecessary information and makes it difficult to find which rules we’ve configured.</p>

<p>One of the most used options is probably <strong>Path Rules</strong> to enter a rule to match the document with the directory. It’s not the most intuitive way to create a rule, so I hope the developer will consider changing it to scope bars-based rules creation.</p>

<h2 id="summary">Summary</h2>
<p>OpenIn has made managing default applications for each document much more manageable. If you’re looking for a more granular way to set default applications, you’re going to like what OpenIn offers. You can purchase OpenIn for $9.99, or you can get it on Setapp by <a href="http://sayzlim.net/go/setapp/" title="Sign Up Setapp">signing up for a 7-days trial</a>.</p>
]]></content>
  </entry>
  
</feed>
